rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // 헬퍼 함수들
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
              (
                request.auth.token.email == 'dudals7334@naver.com' ||
                request.auth.token.email == 'everystars@naver.com' ||
                exists(/databases/$(database)/documents/admins/$(request.auth.uid))
              );
    }
    
    function isFAQAdmin() {
      return isAdmin();
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwnerOrAdmin(userId) {
      return isOwner(userId) || isAdmin();
    }
    
    // 채팅/상담 보조 함수들
    function isSupportAccount(userId) {
      // 클라이언트에서 운영자와의 1:1 문의용 가상 ID
      return userId == 'support';
    }
    
    function isTherapistUser(userId) {
      // 실제 치료사 계정인지 확인 (users 컬렉션의 userType)
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             (get(/databases/$(database)/documents/users/$(userId)).data.userType in ['therapist', 'teacher']);
    }
    
    // 치료사 구독 활성 여부 확인 (이용권이 있고 만료일이 현재 이후)
    function hasActiveTherapistSubscription(userId) {
      return exists(/databases/$(database)/documents/user-subscription-status/$(userId)) &&
             get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.hasActiveSubscription == true &&
             (
               // Timestamp 타입일 때만 비교 가능, 보수적으로 true/false 처리
               (get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.expiryDate is timestamp &&
                get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.expiryDate > request.time)
             ) &&
             (
               !get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.keys().hasAny(['subscriptionType']) ||
               get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.subscriptionType in ['therapist', 'teacher'] ||
               // 일부 데이터는 therapist로 저장되므로 포괄 허용
               get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.subscriptionType == 'therapist'
             );
    }

    // 학부모 구독 활성 여부 확인
    function hasActiveParentSubscription(userId) {
      return exists(/databases/$(database)/documents/user-subscription-status/$(userId)) &&
             get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.hasActiveSubscription == true &&
             (
               (get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.expiryDate is timestamp &&
                get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.expiryDate > request.time)
             ) &&
             (
               get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.subscriptionType in ['parent']
             );
    }

    // 만료 후 유예 기간 허용 (days 일 이내)
    function isWithinTherapistGrace(userId, days) {
      return exists(/databases/$(database)/documents/user-subscription-status/$(userId)) &&
             (get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.expiryDate is timestamp) &&
             (get(/databases/$(database)/documents/user-subscription-status/$(userId)).data.expiryDate + duration.value(days, 'd') > request.time);
    }
    
    // 추가 보안 헬퍼 함수들
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPhone(phone) {
      // 더 유연한 전화번호 패턴 (하이픈 있거나 없거나 모두 허용)
      return phone.matches('^01[0-9]-?[0-9]{3,4}-?[0-9]{4}$') ||
             phone.matches('^01[0-9][0-9]{7,8}$');
    }
    
    // 드롭다운 경력 라벨 유효성 검사 ("1년 미만" ~ "30년차")
    function isValidExperienceLabel(label) {
      return label in [
        '1년 미만', '1년차', '2년차', '3년차', '4년차', '5년차', '6년차', '7년차', '8년차', '9년차',
        '10년차', '11년차', '12년차', '13년차', '14년차', '15년차', '16년차', '17년차', '18년차', '19년차',
        '20년차', '21년차', '22년차', '23년차', '24년차', '25년차', '26년차', '27년차', '28년차', '29년차',
        '30년차'
      ];
    }
    
    function hasRecentActivity() {
      // 인증된 사용자면 최근 활동으로 간주 (단순화)
      return request.auth != null;
    }
    
    function isBusinessHours() {
      // 임시로 항상 true 반환 (영업시간 제한 없음)
      return true;
    }
    
    function rateLimitCheck(maxPerMinute) {
      // 임시로 항상 true 반환 (rate limiting은 클라이언트에서 처리)
      return true;
    }
    
    // 관리자 컬렉션 (관리자만 관리 가능)
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    
    // 사용자 프로필 (세분화된 권한)
    match /users/{userId} {
      // 개별 프로필 조회 - 비로그인 사용자도 공개 정보 조회 가능 (게시글 상세보기용)
      allow get: if true;
      
      // 사용자 목록 조회 - 관리자만 가능
      allow list: if isAdmin();
      
      // 프로필 생성 - 본인만, 이메일/전화번호 검증 포함
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'name', 'userType', 'createdAt']) &&
                       request.resource.data.email is string &&
                       isValidEmail(request.resource.data.email) &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() >= 2 &&
                       request.resource.data.userType in ['parent', 'therapist'] &&
                       (!request.resource.data.keys().hasAny(['phone']) || 
                        isValidPhone(request.resource.data.phone)) &&
                       hasRecentActivity();
      
        // 프로필 수정 - 관리자 전면 허용, 소유자는 제한적 허용
        allow update: if isAdmin() || (
                        isOwner(userId) && 
                       (
                         // 활동 전용 필드 빠른 갱신 허용
                         (
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastLoginAt','lastActivity','updatedAt']) &&
                           request.resource.data.updatedAt is timestamp
                         ) ||
                         // 후기 보상: 소유자가 인터뷰권을 +1, reviewBonusAwarded를 +1 증가시키는 경우만 허용 (5분 쿨다운)
                         (
                           isOwner(userId) &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['interviewTokens','reviewBonusAwarded','lastTokenAdded','updatedAt']) &&
                           request.resource.data.interviewTokens is number && request.resource.data.reviewBonusAwarded is number &&
                           request.resource.data.interviewTokens == resource.data.interviewTokens + 1 &&
                           request.resource.data.reviewBonusAwarded == resource.data.reviewBonusAwarded + 1 &&
                           request.resource.data.lastTokenAdded is timestamp &&
                           (!resource.data.keys().hasAny(['lastTokenAdded']) || request.time > resource.data.lastTokenAdded + duration.value(5, 'm'))
                         ) ||
                         // 민감한 필드는 관리자만 수정 가능 (인터뷰권 포함)
                         (!request.resource.data.diff(resource.data).affectedKeys().hasAny([
                           'email', 'userType', 'createdAt', 'isVerified', 'verifiedAt',
                           'hasCertification', 'hasExperienceProof', 'hasIdVerification',
                           'profileStatus', 'certificationBadge', 'totalMatches', 'status',
                           'interviewTokens', 'lastTokenUsed', 'lastTokenRefunded', 'lastTokenAdded', 'reviewBonusAwarded'
                         ]) || isAdmin() || (
                           // 자동 인증 예외: 시스템이 통계 필드를 갱신하며 인증 플래그를 true로 설정하려는 경우 허용
                           request.resource.data.isVerified == true &&
                           request.resource.data.certificationBadge == 'certified' &&
                           // 통계 조건을 만족해야 함 (최소값 기준)
                           request.resource.data.totalMatches >= 3 &&
                           request.resource.data.reviewCount >= 2 &&
                           request.resource.data.rating >= 4.5
                         ) || (
                           // 통계 요약 필드(진행바용)만 소유자가 갱신하는 경우 허용
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalMatches','reviewCount','rating','updatedAt']) &&
                           request.resource.data.totalMatches is number && request.resource.data.totalMatches >= 0 &&
                           request.resource.data.reviewCount is number && request.resource.data.reviewCount >= 0 &&
                           request.resource.data.rating is number && request.resource.data.rating >= 0 && request.resource.data.rating <= 5
                         ))
                       ) &&
                       // 전화번호 검증 (수정 시에만)
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['phone']) || 
                        (request.resource.data.phone is string &&
                         request.resource.data.phone.size() >= 10 &&
                         request.resource.data.phone.size() <= 13 &&
                         isValidPhone(request.resource.data.phone))) &&
                       // 이름 검증 (수정 시에만)
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['name']) || 
                        (request.resource.data.name is string &&
                         request.resource.data.name.size() >= 2 &&
                         request.resource.data.name.size() <= 10)) &&
                       // updatedAt 필드 자동 설정 허용
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['updatedAt']) || 
                        request.resource.data.updatedAt is timestamp) &&
                       // 관리자의 사용자 상태 변경 권한
                       ((!request.resource.data.diff(resource.data).affectedKeys().hasAny([
                         'isVerified', 'profileStatus', 'status', 'certificationBadge'
                        ])) || isAdmin())
                      );
      
      // 프로필 삭제 - 관리자만
      allow delete: if isAdmin();
    }
    
    // 선생님께 요청하기 게시글 (세분화된 권한)
    match /requests/{requestId} {
      // 개별 게시글 조회 - 모든 인증된 사용자
      allow get: if isAuthenticated();
      
      // 게시글 목록 조회 - 인증된 사용자, 비활성 계정 제한
      allow list: if isAuthenticated() && hasRecentActivity();
      
      // 게시글 생성 - 스팸 방지 및 내용 검증
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'createdAt', 'status']) &&
                       request.resource.data.title is string &&
                       request.resource.data.content is string &&
                       request.resource.data.title.size() >= 5 &&
                       request.resource.data.title.size() <= 100 &&
                       request.resource.data.content.size() >= 10 &&
                       request.resource.data.content.size() <= 5000 &&
                       request.resource.data.status == 'active' &&
                       hasRecentActivity() &&
                       rateLimitCheck(5);  // 분당 5개 제한
      
      // 게시글 수정 - 작성자만, 일부 필드만 수정 가능
      allow update: if isOwner(resource.data.authorId) && 
                       request.resource.data.authorId == resource.data.authorId &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['authorId', 'createdAt']) &&
                       (request.resource.data.title.size() >= 5 && 
                        request.resource.data.title.size() <= 100) &&
                       (request.resource.data.content.size() >= 10 && 
                        request.resource.data.content.size() <= 5000);
      
      // 게시글 삭제 - 작성자와 관리자만
      allow delete: if isOwnerOrAdmin(resource.data.authorId);
      
      // 댓글/응답 서브컬렉션 (세분화된 권한)
      match /responses/{responseId} {
        // 개별 댓글 조회
        allow get: if isAuthenticated();
        
        // 댓글 목록 조회
        allow list: if isAuthenticated();
        
        // 댓글 생성 - 치료사만, 스팸 방지
        allow create: if isAuthenticated() && 
                         request.resource.data.authorId == request.auth.uid &&
                         request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'requestId']) &&
                         request.resource.data.requestId == requestId &&
                         request.resource.data.content is string &&
                         request.resource.data.content.size() >= 5 &&
                         request.resource.data.content.size() <= 1000 &&
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                         (
                           hasActiveTherapistSubscription(request.auth.uid) ||
                           isWithinTherapistGrace(request.auth.uid, 3) ||
                           isAdmin()
                         ) &&
                         rateLimitCheck(10);  // 분당 10개 제한
        
        // 댓글 수정 - 작성자만
        allow update: if isOwner(resource.data.authorId) &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['authorId', 'createdAt', 'requestId']) &&
                         request.resource.data.content.size() >= 5 &&
                         request.resource.data.content.size() <= 1000;
        
        // 댓글 삭제 - 작성자와 관리자만
        allow delete: if isOwnerOrAdmin(resource.data.authorId);
      }
    }
    
    // 치료사 프로필 (세분화된 권한)
    match /therapistProfiles/{profileId} {
      // 개별 프로필 조회 - 로그인 사용자는 조회 가능 (후기 집계 트랜잭션에서 참조 필요)
      allow get: if isAuthenticated() || (resource.data.status == 'approved');
      
      // 프로필 목록 조회 - 승인된 프로필은 비로그인 사용자도 조회 가능
      allow list: if true;
      
      // 프로필 생성 - 치료사만, 완전한 정보 필수
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['userId', 'name', 'experience', 'specialties', 'education', 'createdAt', 'status']) &&
                       request.resource.data.name.size() >= 2 &&
                       request.resource.data.experience is number &&
                       request.resource.data.experience >= 0 &&
                       request.resource.data.specialties is list &&
                       request.resource.data.specialties.size() > 0 &&
                          request.resource.data.status == 'pending'
                          || isAdmin(); // 관리자 예외: 승인 시 업서트 허용
      
      // 프로필 수정 - 본인은 일부 필드만, 관리자는 상태 변경 가능 + (후기 집계: 학부모의 rating/reviewCount 갱신 허용)
      // 승인된 프로필을 소유자가 수정하는 경우, 검토용 플래그/시간을 반드시 남기도록 강제(isModified, modifiedAt)
      allow update: if (isOwner(resource.data.userId) &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId', 'createdAt', 'status', 'verificationDate']) &&
                          (
                            // 승인 전 일반 수정 규칙
                            resource.data.status != 'approved' ||
                            // 승인 후 예외 1: 공개 전환만 허용 (isPublished/publishedAt)
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPublished','publishedAt','updatedAt']) ||
                            // 승인 후 일반 수정 시는 검토 플래그 필수
                         (request.resource.data.isModified == true &&
                              request.resource.data.modifiedAt is timestamp)
                          )) ||
                      (isAdmin() && 
                        request.resource.data.status in ['pending', 'approved', 'rejected', 'hold']) ||
                      (
                        // 후기 집계: 인증된 학부모가 rating/reviewCount만 갱신하는 경우 허용
                        isAuthenticated() &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reviewCount','rating','updatedAt']) &&
                        request.resource.data.reviewCount is number && request.resource.data.reviewCount >= 0 &&
                        request.resource.data.rating is number && request.resource.data.rating >= 0 && request.resource.data.rating <= 5
                      ) ||
                      (
                        // 자동 인증 예외 (users와 동일 기준)
                        request.resource.data.isVerified == true &&
                        request.resource.data.rating >= 4.5 &&
                        request.resource.data.reviewCount >= 2
                      ) || (
                        // 진행바 동기화용 통계 필드만 갱신 허용
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reviewCount','rating','updatedAt']) &&
                        request.resource.data.reviewCount is number && request.resource.data.reviewCount >= 0 &&
                        request.resource.data.rating is number && request.resource.data.rating >= 0 && request.resource.data.rating <= 5
                      );
      
      // 프로필 삭제 - 관리자만
      allow delete: if isAdmin();
    }
    
    // 매칭 정보
    match /matchings/{matchingId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 생성: 관련 당사자 또는 관리자
      // - 일반 사용자 생성: 기존 키 요구사항 유지
      // - 관리자 생성: requestId 없이도 생성 가능 (채팅에서 직접 생성 시)
      allow create: if isAuthenticated() && (
                       (
                       (request.resource.data.parentId == request.auth.uid || 
                        request.resource.data.therapistId == request.auth.uid) &&
                         request.resource.data.keys().hasAll(['requestId', 'parentId', 'therapistId', 'createdAt'])
                       ) || (
                         isAdmin() &&
                         request.resource.data.keys().hasAll(['parentId','therapistId','createdAt','status'])
                       )
                     );
      
      // 수정은 관련 당사자나 관리자만 (관리자는 상태 필드 갱신 허용)
      allow update: if isAuthenticated() && 
                       (
                         (resource.data.parentId == request.auth.uid || resource.data.therapistId == request.auth.uid) ||
                         (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']))
                       );
      
      // 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 채팅 메시지 (세분화된 권한 + 보안 강화 + 인터뷰권 시스템)
    match /chats/{chatId} {
      // 개별 채팅방 정보 조회
      allow get: if isAuthenticated() && 
                    (resource.data.participants.hasAny([request.auth.uid]) || isAdmin());
      
      // 채팅방 목록 조회 - 관리자 또는 참여자만 (문서별 평가)
      allow list: if isAuthenticated() && (isAdmin() || (request.auth.uid in resource.data.participants));
      
      // 채팅방 생성 - (1) 실제 치료사와의 채팅 또는 (2) 운영자 지원(support) 채널
      allow create: if isAuthenticated() && 
                       request.resource.data.participants.hasAny([request.auth.uid]) &&
                       request.resource.data.participants.size() == 2 &&
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'parentName', 'therapistName', 'participants', 'createdAt', 'lastMessage', 'lastMessageTime', 'status', 'interviewTokenUsed', 'firstResponseReceived']) &&
                       request.resource.data.status == 'active' &&
                       request.resource.data.parentId is string &&
                       request.resource.data.therapistId is string &&
                       request.resource.data.parentName is string &&
                       request.resource.data.therapistName is string &&
                       request.resource.data.interviewTokenUsed is bool &&
                       request.resource.data.firstResponseReceived is bool &&
                       (request.resource.data.parentId == request.auth.uid || 
                        request.resource.data.therapistId == request.auth.uid) &&
                       // 치료사 ID가 실제 치료사 계정이거나, 운영자 지원 채널(support)일 때 허용
                       (isTherapistUser(request.resource.data.therapistId) || isSupportAccount(request.resource.data.therapistId)) &&
                       hasRecentActivity();
      
      // 채팅방 정보 수정 - 참여자만 (상태 변경 등)
      allow update: if isAuthenticated() && 
                       (resource.data.participants.hasAny([request.auth.uid]) || isAdmin()) &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['participants', 'createdAt']);
      
      // 채팅방 삭제 - 관리자만 (중재 목적)
      allow delete: if isAdmin();
      
      // 메시지 서브컬렉션 (강화된 보안)
      match /messages/{messageId} {
        // 개별 메시지 조회
        allow get: if isAuthenticated() && 
                      (get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) || 
                       isAdmin());
        
        // 메시지 목록 조회 - 참여자만, 페이징 적용
        allow list: if isAuthenticated() && (
                       isAdmin() ||
                       (get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
                        hasRecentActivity())
                     );
        
        // 메시지 생성 - 참여자만, 스팸 방지 및 내용 검증, 전화번호 필터링 강화
        allow create: if isAuthenticated() && 
                         request.resource.data.senderId == request.auth.uid &&
                         get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
                         request.resource.data.keys().hasAll(['senderId', 'senderName', 'senderType', 'message', 'timestamp', 'isRead']) &&
                         request.resource.data.message is string &&
                         request.resource.data.message.size() > 0 &&
                         request.resource.data.message.size() <= 1000 &&
                         request.resource.data.senderType in ['parent', 'therapist'] &&
                         request.resource.data.senderName is string &&
                         request.resource.data.isRead is bool &&
                         // 발신자 타입 검증: 치료사 메시지인 경우 채팅방의 치료사이거나 관리자(운영자)
                         (
                           request.resource.data.senderType != 'therapist' ||
                           request.auth.uid == get(/databases/$(database)/documents/chats/$(chatId)).data.therapistId ||
                           isAdmin()
                         ) &&
                         // 전화번호/금지어 필터링 강화 (다양한 패턴 차단)
                         !request.resource.data.message.lower().matches('.*직거래.*|.*외부.*|.*카톡.*|.*전화.*|.*010.*|.*011.*|.*016.*|.*017.*|.*018.*|.*019.*|.*공일영.*|.*일이삼.*|.*핸드폰.*|.*번호.*|.*연락처.*') &&
                         // 숫자 연속 패턴 차단 (전화번호 가능성)
                         !request.resource.data.message.matches('.*[0-9]{8,11}.*') &&
                         rateLimitCheck(30);  // 분당 30개 메시지 제한
        
        // 메시지 수정 - 본인만, 5분 이내, 읽음 상태 변경만
        allow update: if isOwner(resource.data.senderId) &&
                         request.time < resource.data.timestamp + duration.value(5, 'm') &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['message', 'editedAt']) &&
                         request.resource.data.message.size() > 0 &&
                         request.resource.data.message.size() <= 1000;
        
        // 메시지 삭제 - 관리자만 (중재 목적)
        allow delete: if isAdmin();
      }
    }
    
    // 신고 접수 (직거래 신고 등) - 실용적인 운영용 보안 규칙
    match /reports/{reportId} {
      // 신고 읽기: 특정 관리자 이메일 또는 관리자 컬렉션에 등록된 사용자
      allow read: if isAuthenticated() && 
                     (request.auth.token.email == 'dudals7334@naver.com' ||
                      request.auth.token.email == 'everystars@naver.com' ||
                      exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
      
      // 신고 생성: 누구나 가능 (익명 신고 지원), 실제 데이터 구조에 맞춘 검증
      allow create: if request.resource.data.keys().hasAll([
                         'type', 'reporterId', 'reporterName', 'reporterType',
                         'reportedName', 'title', 'description', 'evidence',
                         'status', 'priority', 'createdAt', 'updatedAt', 'isAnonymous'
                       ]) &&
                       // 기본 타입 검증
                       request.resource.data.type is string &&
                       request.resource.data.reporterId is string &&
                       request.resource.data.reporterName is string &&
                       request.resource.data.reporterType == 'parent' &&
                       request.resource.data.reportedName is string &&
                       request.resource.data.title is string &&
                       request.resource.data.description is string &&
                       request.resource.data.evidence is list &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.priority in ['urgent', 'medium', 'low'] &&
                       request.resource.data.isAnonymous is bool &&
                       // 최소 길이 검증 (너무 엄격하지 않게)
                       request.resource.data.reportedName.size() >= 1 &&
                       request.resource.data.title.size() >= 1 &&
                       request.resource.data.description.size() >= 1;
      
      // 신고 수정: 관리자와 시스템 업데이트 허용 (파일 증빙 추가용)
      allow update: if (isAuthenticated() && 
                       (request.auth.token.email == 'dudals7334@naver.com' ||
                        request.auth.token.email == 'everystars@naver.com' ||
                        exists(/databases/$(database)/documents/admins/$(request.auth.uid)))) || 
                       // 증빙 파일 추가 업데이트만 허용 (파일 업로드 후)
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['evidence', 'updatedAt']);
      
      // 신고 삭제: 관리자만 가능 (기록 보관 목적)
      allow delete: if isAuthenticated() && 
                       (request.auth.token.email == 'dudals7334@naver.com' ||
                        request.auth.token.email == 'everystars@naver.com' ||
                        exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // 결제 정보
    match /payments/{paymentId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 결제 생성은 본인과 관리자만
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == request.auth.uid || isAdmin()) &&
                       request.resource.data.keys().hasAll(['userId', 'amount', 'type', 'createdAt']) &&
                       request.resource.data.amount is number &&
                       request.resource.data.amount > 0 &&
                       // addon_token: 인터뷰권 추가 구매(관리자 수동 부여) 구분용
                       request.resource.data.type in ['subscription', 'lesson', 'refund', 'addon_token'] &&
                       (!request.resource.data.keys().hasAny(['note']) || request.resource.data.note is string);
      
      // 결제 수정은 관리자만
      allow update: if isAdmin();
      
      // 결제 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 리뷰 정보
    match /reviews/{reviewId} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 리뷰 생성은 본인만
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['authorId', 'therapistId', 'rating', 'content', 'createdAt']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() > 0;
      
      // 리뷰 수정은 본인과 관리자만
      allow update: if isOwnerOrAdmin(resource.data.authorId);
      
      // 리뷰 삭제는 본인과 관리자만
      allow delete: if isOwnerOrAdmin(resource.data.authorId);
    }
    
    // 고객 지원 문의
    match /inquiries/{inquiryId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 문의 생성은 인증된 사용자만
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'title', 'content', 'category', 'createdAt']) &&
                       request.resource.data.title is string &&
                       request.resource.data.content is string &&
                       request.resource.data.title.size() > 0 &&
                       request.resource.data.content.size() > 0;
      
      // 문의 수정은 본인과 관리자만
      allow update: if isOwnerOrAdmin(resource.data.userId);
      
      // 문의 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 공지사항
    match /notices/{noticeId} {
      // 모든 사용자가 읽기 가능
      allow read: if true;
      
      // 특정 관리자만 공지사항 관리 가능 (FAQ 관리자와 동일)
      allow create, update, delete: if isFAQAdmin();
    }
    
    // FAQ
    match /faqs/{faqId} {
      // 모든 사용자가 읽기 가능
      allow read: if true;
      
      // 특정 관리자만 FAQ 관리 가능
      allow create, update, delete: if isFAQAdmin();
    }
    
    // 시스템 통계 (사이트 통계는 모든 사용자 읽기 가능, 관리자만 수정 가능)
    match /statistics/{docId} {
      // 읽기: 메인페이지 공개 통계 or 관리자
      allow read: if (docId == 'site-stats') || isAdmin();
      // 쓰기: 관리자만
      allow create, update, delete: if isAdmin();
    }

    // 관리자 대시보드: 실시간 세션 정보 (활성 사용자 집계 용도)
    match /userSessions/{sessionId} {
      // 관리자만 조회 가능 (리스트/쿼리 포함)
      allow read: if isAdmin();

        // 생성: 본인만 (필드 제한 완화)
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

        // 갱신: 본인만 (필드 제한 완화)
        allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid);

        // 본인 또는 관리자만 삭제 허용
        allow delete: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
    }

    // 관리자 대시보드: 프로필 심사 대기 및 실시간 검증 처리
    match /profileSubmissions/{submissionId} {
      // 읽기: 관리자 전체, 치료사는 본인 문서만 조회 가능
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);

      // 생성: 치료사 본인만, 필수 필드 및 기본 검증
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['userId','teacherName','email','phone','status','createdAt']) &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.teacherName is string && request.resource.data.teacherName.size() >= 1 &&
                       request.resource.data.email is string && isValidEmail(request.resource.data.email) &&
                       request.resource.data.phone is string && isValidPhone(request.resource.data.phone) &&
                       request.resource.data.createdAt is timestamp &&
                       hasRecentActivity();

      // 업데이트:
      // - 관리자: 상태/우선순위/검토 정보만 변경 가능 (실시간 대시보드 반영)
      // - 소유자(치료사): pending 상태에서 내용 보완 가능(식별/상태/생성일 불가)
      allow update: if (
                        isAdmin() &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['status','priority','reviewedAt','reviewerId','reviewReason','updatedAt']) &&
                        request.resource.data.status in ['pending','approved','rejected','hold']
                      ) || (
                        isOwner(resource.data.userId) &&
                        resource.data.status == 'pending' &&
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId','status','createdAt'])
                      );

      // 삭제: 관리자만 (기록 관리 목적)
      allow delete: if isAdmin();
    }
    
    // 시스템 로그 (관리자만 접근 가능)
    match /logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // 구독/이용권 정보
    match /subscriptions/{subscriptionId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 구독 생성은 본인과 관리자만
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == request.auth.uid || isAdmin()) &&
                       request.resource.data.keys().hasAll(['userId', 'planType', 'status', 'startDate', 'endDate', 'createdAt']) &&
                       request.resource.data.planType in ['basic', 'premium', 'enterprise'] &&
                       request.resource.data.status in ['active', 'expired', 'cancelled'];
      
      // 구독 수정은 관리자만
      allow update: if isAdmin();
      
      // 구독 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 환불 요청
    match /refunds/{refundId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 환불 요청 생성은 본인만
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'paymentId', 'reason', 'amount', 'status', 'createdAt']) &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.amount is number &&
                       request.resource.data.amount > 0 &&
                       request.resource.data.reason is string &&
                       request.resource.data.reason.size() > 0;
      
      // 환불 상태 변경은 관리자만
      allow update: if isAdmin();
      
      // 환불 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 알림
    match /notifications/{notificationId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 알림 생성은 시스템/관리자만
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'title', 'message', 'type', 'isRead', 'createdAt']) &&
                       request.resource.data.type in ['system', 'matching', 'payment', 'chat', 'report'] &&
                       request.resource.data.isRead == false;
      
      // 알림 읽음 처리는 본인만
      allow update: if isOwner(resource.data.userId) && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) &&
                       request.resource.data.isRead == true;
      
      // 관리자는 모든 알림 수정 가능
      allow update: if isAdmin();
      
      // 알림 삭제는 본인과 관리자만
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }
    
    // 프로필 검증 서류 메타데이터
    match /verification_documents/{documentId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 서류 메타데이터 생성은 해당 사용자와 관리자만
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == request.auth.uid || isAdmin()) &&
                       request.resource.data.keys().hasAll(['userId', 'fileName', 'fileType', 'fileSize', 'uploadDate', 'status']) &&
                       request.resource.data.status in ['pending', 'approved', 'rejected'] &&
                       request.resource.data.fileType in ['education', 'experience', 'certificate', 'license', 'bankbook', 'criminal-background-check', 'misc-documents', 'introduction-video'];
      
      // 검증 상태 변경은 관리자만
      allow update: if isAdmin();
      
      // 서류 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 채팅 파일 메타데이터
    match /chat_files/{fileId} {
      // 채팅 참여자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.uploaderId == request.auth.uid || 
                      isAdmin());
      
      // 파일 메타데이터 생성은 업로더만
      allow create: if isAuthenticated() && 
                       request.resource.data.uploaderId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['chatId', 'uploaderId', 'fileName', 'fileType', 'fileSize', 'uploadDate']);
      
      // 파일 삭제는 관리자만 (중재 목적)
      allow delete: if isAdmin();
    }
    
    // 설정 정보 (관리자만 접근 가능)
    match /settings/{settingId} {
      allow read, write: if isAdmin();
    }
    
    // 수업 정보 (강화된 권한)
    match /lessons/{lessonId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 수업 생성은 관리자 또는 매칭 완료된 당사자만
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'matchingId', 'scheduledDate', 'status', 'createdAt']) &&
                       (request.resource.data.parentId == request.auth.uid || 
                        request.resource.data.therapistId == request.auth.uid || 
                        isAdmin()) &&
                       exists(/databases/$(database)/documents/matchings/$(request.resource.data.matchingId)) &&
                       request.resource.data.status == 'scheduled' &&
                       hasRecentActivity();
      
      // 수업 상태 변경은 관련 당사자와 관리자만
      allow update: if isAuthenticated() && 
                       (resource.data.parentId == request.auth.uid || 
                        resource.data.therapistId == request.auth.uid || 
                        isAdmin()) &&
                       // 상태만 변경 가능, 기본 정보는 수정 불가
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedAt', 'notes', 'updatedAt']);
      
      // 수업 삭제는 관리자만 (기록 보관 목적)
      allow delete: if isAdmin();
    }
    
    // 수업 계획서 (교육 계획)
    match /lesson-plans/{lessonPlanId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.therapistId == request.auth.uid || 
                      resource.data.parentId == request.auth.uid || 
                      isAdmin());
      
      // 치료사만 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.therapistId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['therapistId', 'parentId', 'title', 'objectives', 'activities', 'createdAt']) &&
                       hasRecentActivity();
      
      // 치료사와 관리자만 수정 가능
      allow update: if isAuthenticated() && 
                       (resource.data.therapistId == request.auth.uid || isAdmin());
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 일정 관리 (스케줄링)
    match /schedules/{scheduleId} {
      // 본인과 관련 당사자, 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      resource.data.relatedUsers.hasAny([request.auth.uid]) || 
                      isAdmin());
      
      // 본인만 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'title', 'startTime', 'endTime', 'type', 'createdAt']) &&
                       request.resource.data.type in ['lesson', 'consultation', 'break', 'personal'] &&
                       hasRecentActivity();
      
      // 본인과 관리자만 수정 가능
      allow update: if isOwnerOrAdmin(resource.data.userId);
      
      // 본인과 관리자만 삭제 가능
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }
    
    // 즐겨찾기/북마크 (치료사 즐겨찾기)
    match /favorites/{userId} {
      // 본인만 읽기 가능
      allow read: if isOwner(userId);
      
      // 본인만 생성/수정/삭제 가능
      allow create, update, delete: if isOwner(userId) && 
                                       hasRecentActivity();
    }
    
    // 사용자 선호도 설정
    match /user-preferences/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               request.resource.data.keys().hasAll(['userId', 'notifications', 'privacy', 'updatedAt']) &&
                               hasRecentActivity();
      
      // 관리자만 삭제 가능 (사용자 탈퇴 시)
      allow delete: if isAdmin();
    }
    
    // 위치 정보 (민감한 정보)
    match /locations/{userId} {
      // 본인, 매칭된 상대방, 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId) || 
                     (isAuthenticated() && 
                      exists(/databases/$(database)/documents/matchings/$(request.auth.uid + '_' + userId)));
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               request.resource.data.keys().hasAll(['userId', 'address', 'coordinates', 'accessibility', 'updatedAt']) &&
                               hasRecentActivity();
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 비상 연락처 (매우 민감)
    match /emergency-contacts/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               request.resource.data.keys().hasAll(['userId', 'name', 'phone', 'relationship', 'updatedAt']) &&
                               isValidPhone(request.resource.data.phone) &&
                               hasRecentActivity();
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 수업 히스토리 (기록 보관)
    match /lesson-history/{historyId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'lessonId', 'date', 'status', 'createdAt']);
      
      // 관리자만 수정 가능 (정정 목적)
      allow update: if isAdmin();
      
      // 삭제 불가 (영구 기록)
      allow delete: if false;
    }
    
    // 평점 히스토리 (투명성)
    match /rating-history/{ratingId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.raterId == request.auth.uid || 
                      resource.data.ratedId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (리뷰 작성 시 자동 생성)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['raterId', 'ratedId', 'reviewId', 'rating', 'createdAt']);
      
      // 수정/삭제 불가 (변조 방지)
      allow update, delete: if false;
    }
    
    // 할인 쿠폰/프로모션 코드
    match /promotional-codes/{codeId} {
      // 관리자만 읽기/관리 가능
      allow read, write: if isAdmin();
    }
    
    // 쿠폰 사용 기록
    match /coupon-usage/{usageId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 시스템/관리자만 생성 가능
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'couponId', 'usedAt', 'discountAmount']);
      
      // 수정/삭제 불가 (회계 기록)
      allow update, delete: if false;
    }
    
    // 사용자 활동 로그 (보안 감사)
    match /user-activity/{userId}/logs/{logId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 시스템만 생성 가능 (자동 로깅)
      allow create: if isAdmin();
      
      // 수정/삭제 불가 (감사 추적)
      allow update, delete: if false;
    }
    
    // 회원정보 수정 히스토리 (보안 감사)
    match /profile-edit-history/{userId}/edits/{editId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 시스템/관리자만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'editedBy', 'editedAt', 'changedFields', 'oldValues', 'newValues']) &&
                       request.resource.data.editedBy == userId &&
                       request.resource.data.changedFields is list &&
                       request.resource.data.changedFields.size() > 0;
      
      // 수정/삭제 불가 (히스토리 보존)
      allow update, delete: if false;
    }
    
    // 비밀번호 변경 이력 (보안 강화)
    match /password-change-history/{userId}/changes/{changeId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 시스템/관리자만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'changedAt', 'ipAddress', 'userAgent']) &&
                       request.resource.data.userId == userId;
      
      // 수정/삭제 불가 (보안 감사)
      allow update, delete: if false;
    }
    
    // 차단된 사용자 목록
    match /blocked-users/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               hasRecentActivity() &&
                               rateLimitCheck(10); // 분당 10회 제한
      
      // 본인과 관리자만 삭제 가능
      allow delete: if isOwnerOrAdmin(userId);
    }
    
    // 저장된 검색 조건
    match /saved-searches/{userId} {
      // 본인만 접근 가능
      allow read, write: if isOwner(userId) && 
                            hasRecentActivity();
    }
    
    // 앱 버전 및 설정 관리
    match /app-versions/{versionId} {
      // 모든 사용자 읽기 가능 (업데이트 체크)
      allow read: if true;
      
      // 관리자만 생성/수정/삭제 가능
      allow create, update, delete: if isAdmin();
    }
    
    // 시스템 상태 및 점검 정보
    match /system-status/{statusId} {
      // 모든 사용자 읽기 가능
      allow read: if true;
      
      // 관리자만 수정 가능
      allow write: if isAdmin();
    }
    
    // 사용자 탈퇴 기록 (법적 요구사항)
    match /user-deletions/{deletionId} {
      // 관리자만 접근 가능
      allow read, write: if isAdmin();
    }
    
    // 데이터 백업 메타데이터
    match /backup-metadata/{backupId} {
      // 관리자만 접근 가능
      allow read, write: if isAdmin();
    }
    
    // 서비스 약관 동의 기록
    match /terms-agreements/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성 가능 (최초 가입 시, 약관 변경 시)
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['userId', 'termsVersion', 'agreedAt', 'ipAddress']);
      
      // 수정/삭제 불가 (법적 기록)
      allow update, delete: if false;
    }
    
    // 학부모 요청 게시글 (parent-requests 컬렉션)
    match /parent-requests/{postId} {
      // 개별 게시글 조회 - 인증된 사용자만 (치료사가 게시글 정보 가져오기 위해 필요)
      allow get: if isAuthenticated();
      
      // 게시글 목록 조회 - 인증된 사용자만
      allow list: if isAuthenticated() && hasRecentActivity();
      
      // 학부모만 요청 게시글 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'parent' &&
                       request.resource.data.keys().hasAll(['authorId', 'createdAt', 'status']) &&
                       request.resource.data.status in ['active', 'matching'] &&
                       hasRecentActivity() &&
                       rateLimitCheck(5);
      
      // 작성자와 관리자만 수정 가능
      allow update: if isAuthenticated() && (
                       isOwner(resource.data.authorId) || 
                       isAdmin()
                     ) &&
                     !request.resource.data.diff(resource.data).affectedKeys().hasAny(['authorId', 'createdAt']);
      
      // 작성자와 관리자만 삭제 가능
      allow delete: if isAuthenticated() && (
                       isOwner(resource.data.authorId) || 
                       isAdmin()
                     );
    }
    
    // 게시글 (선생님 요청하기 - posts 컬렉션) - 단순화된 규칙
    match /posts/{postId} {
      // 게시글 조회(상세/목록) 모두 허용 - 운영 단계에서 필터는 쿼리로 제어
      allow read: if true;
      
      // 게시글 생성 - 타입별로 권한 구분
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.keys().hasAll([
                         'treatment', 'region', 'age', 'gender', 'frequency', 
                         'timeDetails', 'price', 'authorId', 'createdAt', 'status', 'applications', 'type'
                       ]) &&
                       // 기본 필드 검증
                       request.resource.data.treatment is string &&
                       request.resource.data.treatment.size() >= 2 &&
                       request.resource.data.region is string &&
                       request.resource.data.age is string &&
                       request.resource.data.gender in ['남', '여'] &&
                       request.resource.data.frequency is string &&
                       request.resource.data.status in ['active', 'matching'] &&
                       request.resource.data.applications == 0 &&
                       request.resource.data.type in ['request', 'teacher-offer'] &&
                       // 추가 필드들 검증 (title, category, details, additionalInfo)
                       (!request.resource.data.keys().hasAny(['title']) || 
                        request.resource.data.title is string) &&
                       (!request.resource.data.keys().hasAny(['category']) || 
                        request.resource.data.category is string) &&
                       (!request.resource.data.keys().hasAny(['details']) || 
                        request.resource.data.details is string) &&
                       (!request.resource.data.keys().hasAny(['additionalInfo']) || 
                        request.resource.data.additionalInfo is string) &&
                       // 작성자 정보는 실시간으로 가져오므로 저장하지 않음
                       (!request.resource.data.keys().hasAny(['authorName'])) &&
                       // 타입별 권한 검증
                       (
                         // 관리자는 모든 타입 게시글 작성 가능
                         isAdmin() ||
                         // 특정 관리자 이메일은 모든 타입 게시글 작성 가능 (사용자 문서 체크 우회)
                         isFAQAdmin() ||
                         // 학부모 요청 게시글 (type: 'request')
                         (request.resource.data.type == 'request' && 
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'parent' &&
                          hasActiveParentSubscription(request.auth.uid)) ||
                         // 치료사 홍보 게시글 (type: 'teacher-offer') 
                         (request.resource.data.type == 'teacher-offer' && 
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                          (
                            hasActiveTherapistSubscription(request.auth.uid) ||
                            (
                              exists(/databases/$(database)/documents/therapistProfiles/$(request.auth.uid)) &&
                              get(/databases/$(database)/documents/therapistProfiles/$(request.auth.uid)).data.status == 'approved'
                            )
                          ))
                       ) &&
                       (isFAQAdmin() || hasRecentActivity()) &&
                       rateLimitCheck(5); // 분당 5개 제한
      
      // 게시글 수정 - 작성자는 기본 정보와 상태 변경 가능, 치료사/관리자는 치료사 정보 추가 가능
      allow update: if isAuthenticated() && (
                       // 작성자는 기본 정보와 진행 상태만 수정 가능 + '끌어올림' 예외 허용
                       (isOwner(resource.data.authorId) && 
                        request.resource.data.authorId == resource.data.authorId &&
                        (
                          // 일반 수정: createdAt은 건드리지 않음
                          (
                            !request.resource.data.diff(resource.data).affectedKeys().hasAny([
                              'authorId', 'applications', 'teacherName', 'teacherExperience',
                              'teacherSpecialty', 'teacherRating', 'teacherReviewCount', 'teacherProfileImage',
                              'teacherCertifications', 'teacherEducation', 'teacherCareer', 'teacherRegions',
                              'teacherSchedule', 'teacherIntroduction', 'teacherPhilosophy', 'teacherServices', 'teacherVideoUrl',
                              'createdAt'
                            ]) &&
                            // 상태 변경 시 유효한 값 검증
                            (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['status']) || 
                             request.resource.data.status in ['active', 'matching', 'meeting', 'completed'])
                          ) ||
                          // 끌어올림: createdAt, bumpedAt만 변경 허용 + 24시간 제한
                          (
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['createdAt','bumpedAt']) &&
                            request.resource.data.createdAt is timestamp &&
                            request.resource.data.bumpedAt is timestamp &&
                            (
                              !resource.data.keys().hasAny(['bumpedAt']) ||
                              request.time > resource.data.bumpedAt + duration.value(24, 'h')
                            )
                          )
                        )
                       ) ||
                       // 치료사는 지원 시 자신의 정보를 추가할 수 있음
                       (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny([
                          'authorId', 'createdAt', 'treatment', 'region', 'age', 'gender', 
                          'frequency', 'timeDetails', 'price'
                        ]) &&
                        // 지원자 수 증가 허용
                        request.resource.data.applications >= resource.data.applications) ||
                       // 관리자는 모든 필드 수정 가능 (숨김/표시, 순서 변경 등)
                       isAdmin() ||
                       // 관련 치료사가 채팅 시작 시 상태 변경 (meeting)
                       (isAuthenticated() &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
                        request.resource.data.status in ['meeting', 'completed'] &&
                        (resource.data.teacherUserId == request.auth.uid ||
                         exists(/databases/$(database)/documents/applications/$(request.auth.uid + '_' + resource.id))))
                     );
      
      // 게시글 삭제 - 작성자와 관리자만 (관리자 삭제는 감사 로그 시스템 병행 사용 권장)
      allow delete: if isOwnerOrAdmin(resource.data.authorId);
    }
    
    // 게시글 지원/신청 관리 (최대 2명 지원자 제한)
    match /applications/{applicationId} {
      // 지원자와 게시글 작성자, 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.applicantId == request.auth.uid || 
                      resource.data.postAuthorId == request.auth.uid || 
                      isAdmin());
      
      // 게시글 지원자 목록 쿼리 권한 - 학부모가 본인 게시글의 지원자 목록 조회 가능
      allow list: if isAuthenticated() && 
                     (isAdmin() || 
                      (hasRecentActivity() && request.query.limit <= 50) ||
                      // 게시글 작성자는 자신의 게시글에 대한 지원자 목록을 조회할 수 있음
                      (request.auth != null && hasRecentActivity()));
      
      // 치료사만 지원 가능 - 최대 2명 제한 + 활성 구독 필요
      allow create: if isAuthenticated() && 
                       request.resource.data.applicantId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['postId', 'applicantId', 'postAuthorId', 'message', 'status', 'createdAt']) &&
                       request.resource.data.message is string &&
                       request.resource.data.message.size() >= 10 &&
                       request.resource.data.status == 'pending' &&
                       // 해당 게시글이 존재하는지 확인
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       // 지원자 수가 2명 미만인지 확인 (applications 필드가 없거나 null인 경우 0으로 처리)
                       (
                         !('applications' in get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data) || 
                         get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data.applications == null ||
                         get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data.applications < 2
                       ) &&
                       // 치료사 권한 확인
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       (
                         hasActiveTherapistSubscription(request.auth.uid) ||
                         isWithinTherapistGrace(request.auth.uid, 3) ||
                         isAdmin()
                       );
                       // 중복 지원 방지는 클라이언트 트랜잭션에서 처리 (복잡한 쿼리 방지)
      
      // 상태 변경은 게시글 작성자와 지원자만 (승인/거절/철회)
      allow update: if isAuthenticated() && 
                       (resource.data.applicantId == request.auth.uid || 
                        resource.data.postAuthorId == request.auth.uid || 
                        isAdmin()) &&
                       request.resource.data.status in ['pending', 'approved', 'rejected', 'withdrawn'];
      
      // 삭제는 관리자만 (기록 보관)
      allow delete: if isAdmin();
    }
    
    // 게시글 조회수 관리 (익명 통계)
    match /post-views/{viewId} {
      // 관리자와 게시글 작성자만 읽기 가능 (조회수 기록은 보안 유지)
      allow read: if isAdmin() || 
                     (isAuthenticated() && 
                      resource.data.postAuthorId == request.auth.uid);
      
      // 조회수 증가는 모든 인증된 사용자 (중복 방지 로직은 클라이언트에서)
      allow create: if isAuthenticated() && 
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       request.resource.data.keys().hasAll(['postId', 'postAuthorId', 'viewerId', 'timestamp']) &&
                       // 본인 게시글 조회수는 증가하지 않음
                       request.resource.data.viewerId != request.resource.data.postAuthorId;
      
      // 수정/삭제 불가 (통계 무결성)
      allow update, delete: if false;
    }
    
    // 게시글 즐겨찾기/관심표시 (치료사가 관심 게시글 저장)
    match /post-favorites/{favoriteId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 치료사만 즐겨찾기 추가 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       request.resource.data.keys().hasAll(['userId', 'postId', 'createdAt']) &&
                       hasRecentActivity();
      
      // 본인만 삭제 가능 (즐겨찾기 해제)
      allow delete: if isOwner(resource.data.userId);
    }
    
    // 게시글 검색 기록 (개인화 추천용)
    match /search-history/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if isOwner(userId) && 
                            hasRecentActivity();
    }
    
    // 게시글 신고 (부적절한 내용)
    match /post-reports/{reportId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 인증된 사용자는 신고 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.reporterId == request.auth.uid &&
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       request.resource.data.keys().hasAll(['postId', 'reporterId', 'reason', 'description', 'createdAt']) &&
                       request.resource.data.reason in ['spam', 'inappropriate', 'fraud', 'false_info', 'other'] &&
                       request.resource.data.description is string &&
                       request.resource.data.description.size() >= 5 &&
                       hasRecentActivity() &&
                       rateLimitCheck(5); // 분당 5개 제한
      
      // 관리자만 수정/삭제 가능
      allow update, delete: if isAdmin();
    }
    
    // 매칭 성사 기록 (통계 및 성공률 추적)
    match /successful-matches/{matchId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (매칭 성사 시 자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['postId', 'parentId', 'therapistId', 'matchedAt', 'status']);
      
      // 관리자만 수정 가능 (상태 업데이트)
      allow update: if isAdmin();
      
      // 삭제 불가 (성공률 통계 보존)
      allow delete: if false;
    }
    
    // 게시글 댓글/응답 시스템 (posts용)
    match /posts/{postId}/comments/{commentId} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 치료사만 댓글 작성 가능 (지원 의사 표현)
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       exists(/databases/$(database)/documents/posts/$(postId)) &&
                       request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'postId']) &&
                       request.resource.data.postId == postId &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() >= 5 &&
                       request.resource.data.content.size() <= 500 &&
                       hasRecentActivity() &&
                       rateLimitCheck(10); // 분당 10개 제한
      
      // 작성자와 게시글 작성자만 수정 가능
      allow update: if isAuthenticated() && 
                       (resource.data.authorId == request.auth.uid || 
                        get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid ||
                        isAdmin()) &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['authorId', 'createdAt', 'postId']);
      
      // 작성자, 게시글 작성자, 관리자만 삭제 가능
      allow delete: if isAuthenticated() && 
                       (resource.data.authorId == request.auth.uid || 
                        get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid ||
                        isAdmin());
    }
    
    // 게시글 임시저장 (작성 중 임시 보관)
    match /drafts/{userId} {
      // 본인만 접근 가능
      allow read, write: if isOwner(userId) && 
                            hasRecentActivity();
    }
    
    // 게시글 수정 이력 (감사 추적)
    match /post-edit-history/{historyId} {
      // 게시글 작성자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.postAuthorId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['postId', 'postAuthorId', 'editedBy', 'changes', 'editedAt']);
      
      // 수정/삭제 불가 (감사 추적 보존)
      allow update, delete: if false;
    }
    
    // 지역별 인기 통계 (실시간 트렌드)
    match /region-stats/{region} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 시스템/관리자만 업데이트 가능
      allow write: if isAdmin();
    }
    
    // 치료별 인기 통계 (실시간 트렌드)
    match /treatment-stats/{treatment} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 시스템/관리자만 업데이트 가능
      allow write: if isAdmin();
    }
    
    // 알림 구독 설정 (새 게시글 알림)
    match /notification-subscriptions/{subscriptionId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 치료사만 구독 설정 가능 (관심 지역/치료 알림)
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['userId', 'regions', 'treatments', 'isActive', 'createdAt']) &&
                       request.resource.data.regions is list &&
                       request.resource.data.treatments is list &&
                       request.resource.data.isActive == true &&
                       hasRecentActivity();
      
      // 본인만 수정/삭제 가능
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // 인기 검색어 추적 (트렌드 분석)
    match /popular-searches/{searchId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 시스템/관리자만 생성/수정 가능
      allow create, update: if isAdmin() &&
                               request.resource.data.keys().hasAll(['searchTerm', 'count', 'lastSearched']);
      
      // 삭제 불가 (트렌드 데이터 보존)
      allow delete: if false;
    }
    
    // 게시글 만료 관리 (자동 만료 시스템)
    match /post-expiry/{postId} {
      // 게시글 작성자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.authorId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성/수정 가능 (자동 만료 설정)
      allow create, update: if isAdmin() &&
                               request.resource.data.keys().hasAll(['postId', 'authorId', 'expiryDate', 'isExpired']) &&
                               exists(/databases/$(database)/documents/posts/$(postId));
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 치료사 프로필 즐겨찾기 (선생님 둘러보기)
    match /therapist-favorites/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if isOwner(userId);
      
      // 즐겨찾기 추가
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'therapistId', 'createdAt']) &&
                       exists(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId));
    }
    
    // 치료사 프로필 조회 기록 (추천 알고리즘용)
    match /therapist-views/{viewId} {
      // 관리자만 읽기 가능 (분석용)
      allow read: if isAdmin();
      
      // 조회 기록 생성 (익명 또는 인증된 사용자)
      allow create: if request.resource.data.keys().hasAll(['therapistId', 'viewedAt', 'userAgent']) &&
                       exists(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)) &&
                       get(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)).data.status == 'approved';
      
      // 수정/삭제 불가
      allow update, delete: if false;
    }
    
    // 치료사 프로필 검색 기록 (개인화 추천용)
    match /therapist-searches/{searchId} {
      // 관리자만 읽기 가능 (분석용)
      allow read: if isAdmin();
      
      // 검색 기록 생성
      allow create: if request.resource.data.keys().hasAll(['query', 'filters', 'results', 'searchedAt']) &&
                       request.resource.data.query is string &&
                       request.resource.data.query.size() >= 1;
      
      // 수정/삭제 불가
      allow update, delete: if false;
    }
    
    // 치료사-학부모 채팅방 (선생님 둘러보기에서 시작)
    match /therapist-inquiries/{inquiryId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.parentId ||
                      request.auth.uid == resource.data.therapistId ||
                      isAdmin());
      
      // 학부모만 문의 시작 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.parentId == request.auth.uid &&
                       exists(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)) &&
                       get(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)).data.status == 'approved' &&
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'subject', 'initialMessage', 'createdAt', 'status']) &&
                       request.resource.data.status == 'active';
      
      // 상태 업데이트만 관련 당사자가 가능
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.parentId ||
                        request.auth.uid == resource.data.therapistId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 치료사 프로필 평점/리뷰 (선생님 둘러보기 + 마이페이지 지원자 후기)
    match /therapist-reviews/{reviewId} {
      // 모든 사용자(비로그인 포함)가 읽기 가능 (공개 리뷰)
      allow read: if true;
      
        // 수업을 받은 학부모만 리뷰 작성 가능 (또는 자신의 게시글에 승인된 지원자에게 후기 작성)
      allow create: if isAuthenticated() && 
                       request.resource.data.parentId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'rating', 'content', 'createdAt']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       // 성공 매칭 완료 후에만 후기 작성 허용 (고정 ID: parentId_therapistId)
                       exists(/databases/$(database)/documents/successful-matches/$(request.auth.uid + '_' + request.resource.data.therapistId));
      
      // 작성자만 수정 가능 (작성 후 24시간 내)
      allow update: if isOwner(resource.data.parentId) && 
                       request.time < resource.data.createdAt + duration.value(24, 'h') &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['parentId', 'therapistId', 'createdAt']);
      
      // 관리자만 삭제 가능 (부적절한 리뷰)
      allow delete: if isAdmin();
    }

    // 일반 후기 (reviews 컬렉션)
    match /reviews/{reviewId} {
      // 승인된 후기만 읽기 가능 (일반 사용자)
      allow read: if resource.data.status == 'approved' || 
                     isOwner(resource.data.userId) || 
                     isAdmin();
      
      // 인증된 사용자만 후기 작성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       // 필수 필드 존재 검증
                       request.resource.data.keys().hasAll(['title', 'content', 'category', 'rating', 'createdAt', 'status', 'userId', 'author', 'helpfulCount']) &&
                       // 허용된 추가 필드만 허용
                       request.resource.data.keys().hasOnly(['title', 'content', 'category', 'rating', 'createdAt', 'status', 'userId', 'author', 'helpfulCount', 'selectedTags', 'userEmail', 'imageUrls']) &&
                       // 기본 필드 타입 및 값 검증
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       request.resource.data.status == 'approved' &&
                       request.resource.data.title is string &&
                       request.resource.data.content is string &&
                       request.resource.data.category is string &&
                       request.resource.data.author is string &&
                       request.resource.data.helpfulCount == 0 &&
                       // 최소 길이 검증 강화
                       request.resource.data.title.size() >= 1 &&
                       request.resource.data.content.size() >= 30 &&
                       request.resource.data.author.size() >= 1 &&
                       request.resource.data.category.size() >= 1 &&
                       // 선택적 필드 검증 (빈 배열도 허용)
                       (!request.resource.data.keys().hasAny(['selectedTags']) || 
                        (request.resource.data.selectedTags is list && 
                         request.resource.data.selectedTags.size() >= 0)) &&
                       (!request.resource.data.keys().hasAny(['imageUrls']) || 
                        (request.resource.data.imageUrls is list && 
                         request.resource.data.imageUrls.size() >= 0)) &&
                       (!request.resource.data.keys().hasAny(['userEmail']) || 
                        request.resource.data.userEmail is string) &&
                       hasRecentActivity() &&
                       rateLimitCheck(5);  // 분당 5개 제한
      
      // 관리자만 상태 변경 가능 (승인/거부)
      allow update: if isAdmin() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
                       request.resource.data.status in ['pending', 'approved', 'rejected'];
      
      // 작성자는 자신의 후기만 수정 가능 (내용, 제목, 태그만)
      allow update: if isOwner(resource.data.userId) && 
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId', 'createdAt', 'status', 'helpfulCount', 'author']) &&
                       // 수정된 필드 검증
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['title']) ||
                        (request.resource.data.title is string && request.resource.data.title.size() >= 1)) &&
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['content']) ||
                        (request.resource.data.content is string && request.resource.data.content.size() >= 10)) &&
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['selectedTags']) ||
                        (request.resource.data.selectedTags is list && request.resource.data.selectedTags.size() > 0)) &&
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['imageUrls']) ||
                        (request.resource.data.imageUrls is list && request.resource.data.imageUrls.size() >= 0));
      
      // 관리자와 작성자만 삭제 가능
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }
    
    // 치료사 목록 (선생님 둘러보기용 - teachers 컬렉션)
    match /teachers/{teacherId} {
      // 개별 치료사 프로필/목록 조회 - 모두 허용 (공개 목록)
      allow get, list: if true;
      
      // 치료사 프로필 생성은 해당 치료사만 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.id == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['name', 'specialty', 'experience', 'rating', 'reviewCount', 'price', 'region', 'createdAt']) &&
                       request.resource.data.name is string &&
                       request.resource.data.specialty is string &&
                       request.resource.data.experience is number &&
                       request.resource.data.experience >= 0 &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 0 &&
                       request.resource.data.rating <= 5 &&
                       request.resource.data.reviewCount is number &&
                       request.resource.data.reviewCount >= 0;
      
      // 치료사 본인만 프로필 수정 가능 (id/userId/authorId 중 하나가 본인일 때)
      allow update: if isAuthenticated() && (
                       // 소유자 일반 수정 (createdAt 제외)
                       (
                         (isOwner(resource.data.id) || isOwner(resource.data.userId) || isOwner(resource.data.authorId)) &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt'])
                       ) ||
                       // 프로필 끌어올림: createdAt, bumpedAt만 변경 + 24시간 제한
                       (
                         (isOwner(resource.data.id) || isOwner(resource.data.userId) || isOwner(resource.data.authorId)) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['createdAt','bumpedAt']) &&
                         request.resource.data.createdAt is timestamp &&
                         request.resource.data.bumpedAt is timestamp &&
                         (
                           !resource.data.keys().hasAny(['bumpedAt']) ||
                           request.time > resource.data.bumpedAt + duration.value(24, 'h')
                         )
                       ) ||
                       // 관리자는 언제나 수정 가능
                       isAdmin()
                     );
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 치료사 등록 데이터 (localStorage 대신 Firebase 사용)
    match /therapist-registrations/{registrationId} {
      // 치료사 본인과 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // 치료사만 등록 데이터 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll([
                         'userId', 'name', 'birthDate', 'gender', 'phone', 'email', 
                         'address', 'qualification', 'mainSpecialty', 'experience', 
                         'region', 'availableDays', 'availableTime', 'specialties', 
                         'bankName', 'accountHolder', 'accountNumber', 'hourlyRate', 
                         'status', 'createdAt', 'agreeTerms'
                       ]) &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.agreeTerms == true &&
                       // 경력 드롭다운 라벨 검증 허용 (문자열)
                       (request.resource.data.experience is string && isValidExperienceLabel(request.resource.data.experience)) &&
                       hasRecentActivity();
      
      // 치료사 본인 수정 허용(승인 전 일반 수정, 승인 후 수정 시 검토 플래그 필수), 관리자 상태/검토 필드 수정 허용
      allow update: if isAuthenticated() && (
                       (
                         resource.data.userId == request.auth.uid &&
                         // 소유자는 userId/createdAt은 변경 불가. status는 특정 조건에서만 'pending'으로 변경 허용
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId','createdAt']) &&
                         (
                           // 승인 전 일반 수정
                           resource.data.status == 'pending' ||
                           // 승인 후 간편 수정: status 유지하면서 특정 필드만 수정 (희망 치료비, 치료 지역, 치료 가능 요일/시간)
                           (
                             resource.data.status == 'approved' &&
                             request.resource.data.status == 'approved' &&
                             request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                               'hourlyRate', 'treatmentRegion', 'region', 'availableDays', 'availableTime', 'updatedAt'
                             ])
                           ) ||
                           // 승인/반려/보류 후: 수정 시 재검토를 위해 status를 'pending'으로 되돌리면서 수정 허용
                           (
                             (resource.data.status in ['approved','rejected','hold']) &&
                             request.resource.data.isModified == true &&
                             request.resource.data.modifiedAt is timestamp &&
                             request.resource.data.status == 'pending'
                           )
                         ) &&
                         (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['experience']) ||
                          (request.resource.data.experience is string && isValidExperienceLabel(request.resource.data.experience))) &&
                         (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['documents','profilePhoto']) ||
                          (request.resource.data.documents is map || request.resource.data.profilePhoto is string))
                       ) || (
                         isAdmin() &&
                         // 관리자 승인/검토 시 저장되는 필드만 허용
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                           'status','reviewedAt','reviewerId','reviewReason','updatedAt','isPublished','publishedAt'
                         ]) &&
                         request.resource.data.status in ['pending','approved','rejected','hold']
                       )
                     );
      
        // 관리자만 삭제 가능 (완전 삭제는 드물게)
        allow delete: if isAdmin();
      }

        // 치료사 등록 공개 피드(민감 정보 제외) - 로그인 사용자 누구나 목록 열람 가능(학부모 포함)
        match /therapist-registrations-feed/{docId} {
          // 읽기: 로그인 사용자 모두 허용 (학부모/치료사/관리자)
          allow read: if isAuthenticated();

          // 허용 필드 화이트리스트(민감정보 제외)
        function feedAllowedKeys() {
          return [
            'userId','name','gender','region','address','treatmentRegion','specialty','experience','hourlyRate','status',
            'createdAt','updatedAt','therapyActivity','mainSpecialty','educationCareer','certifications',
            'availableDays','availableTime','email','phone','birthDate','qualification'
          ];
        }

        // 생성: 본인만(화이트리스트 필드), 또는 관리자
        allow create: if (
                        isAuthenticated() &&
                        request.resource.data.userId == request.auth.uid &&
                        request.resource.data.keys().hasOnly(feedAllowedKeys())
                      ) || isAdmin();

          // 업데이트: 소유자 또는 관리자, 공개 허용 필드만
          allow update: if (
                            isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid)
                      ) && request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['name','gender','region','address','treatmentRegion','specialty','experience','hourlyRate','status','updatedAt',
                                      'therapyActivity','mainSpecialty','educationCareer','certifications','availableDays','availableTime','email','phone','birthDate','qualification']);

          // 삭제: 관리자만
      allow delete: if isAdmin();
    }
    
    // 관리자 활동 로그 (관리자 기능 사용 추적)
    match /admin-logs/{logId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 시스템이 자동으로 생성 (관리자 활동 추적용)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['adminId', 'action', 'targetId', 'targetType', 'timestamp', 'details']);
      
      // 수정/삭제 불가 (감사 추적 보존)
      allow update, delete: if false;
    }
    
    // 사이트 통계 (실시간 업데이트)
    match /site-statistics/{statId} {
      // 모든 사용자가 기본 통계 읽기 가능 (메인페이지 표시용)
      allow read: if statId in ['total-posts', 'total-teachers', 'total-matches', 'total-reviews'];
      
      // 관리자는 모든 통계 읽기 가능
      allow read: if isAdmin();
      
      // 관리자와 시스템만 통계 생성/수정 가능
      allow create, update: if isAdmin();
      
      // 삭제 불가 (통계 데이터 보존)
      allow delete: if false;
    }
    
    // 시스템 설정 (앱 버전, 점검 공지 등)
    match /system-config/{configId} {
      // 모든 사용자가 앱 설정 읽기 가능 (앱 업데이트 체크용)
      allow read: if configId in ['app-version', 'maintenance-notice', 'service-announcement'];
      
      // 관리자는 모든 설정 읽기/수정 가능
      allow read, write: if isAdmin();
    }
    
    // 사용자 이용권 구매 기록 (결제 관련)
    // 문서 ID는 임의값(docId)이며, 각 문서에 userId 필드를 포함
    match /user-subscriptions/{docId} {
      // 본인과 관리자만 읽기 가능 (쿼리 시 문서별 평가)
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 본인 또는 관리자 생성 가능 (관리자는 0원 이벤트/지급 가능)
      allow create: if (
                       (isAuthenticated() && request.resource.data.userId == request.auth.uid && request.resource.data.amount is number && request.resource.data.amount > 0) ||
                        (isAdmin() && request.resource.data.amount is number && request.resource.data.amount >= 0)
                      ) &&
                      request.resource.data.keys().hasAll(['userId', 'subscriptionType', 'purchaseDate', 'expiryDate', 'status', 'amount']) &&
                      request.resource.data.subscriptionType in ['parent', 'therapist'] &&
                      request.resource.data.status in ['active', 'expired', 'cancelled'] &&
                      hasRecentActivity();
      
      // 관리자만 상태 변경 가능 (만료, 환불 등) - userId 등 식별 필드 변경 금지
      allow update: if isAdmin() &&
                       request.resource.data.status in ['active', 'expired', 'cancelled', 'refunded'] &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId', 'purchaseDate']);
      
      // 삭제 불가 (결제 기록 보존)
      allow delete: if false;
    }
    
    // URL 기반 게시글 접근 로그 (보안 감사 및 분석용)
    match /post-access-logs/{accessId} {
      // 관리자만 로그 읽기 가능 (보안 분석용)
      allow read: if isAdmin();
      
      // 시스템이 자동으로 URL 기반 접근 로그 생성
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll([
                         'userId', 'postId', 'accessMethod', 'accessedAt', 'userAgent', 'ipAddress'
                       ]) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.accessMethod in ['direct_click', 'url_recovery', 'auto_modal', 'refresh_recovery'] &&
                       request.resource.data.postId is string &&
                       request.resource.data.accessedAt is timestamp &&
                       // 스팸 방지 - 분당 최대 100회 로그 생성
                       rateLimitCheck(100);
      
      // 수정/삭제 불가 (감사 추적 보존)
      allow update, delete: if false;
    }
    
    // URL 파라미터 복구 시도 제한 (남용 방지)
    match /post-recovery-attempts/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 시스템이 자동으로 복구 시도 기록
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll([
                         'userId', 'postId', 'recoveryMethod', 'success', 'attemptedAt', 'errorDetails'
                       ]) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.recoveryMethod in ['url_param', 'firebase_query', 'cache_fallback'] &&
                       request.resource.data.success is bool &&
                       request.resource.data.attemptedAt is timestamp &&
                       // 복구 시도 제한 - 분당 최대 20회
                       rateLimitCheck(20) &&
                       hasRecentActivity();
      
      // 관리자만 통계 업데이트 가능
      allow update: if isAdmin();
      
      // 삭제 불가 (복구 패턴 분석용)
      allow delete: if false;
    }
    
    // 사용자별 현재 선택된 게시글 추적 (Firebase 실시간 연동) - 단순화된 규칙
    match /user-current-selection/{userId} {
      // 본인만 읽기/쓰기 가능 (단순화)
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 관리자는 모든 권한
      allow read, write: if isAdmin();
    }
    
    // 중복 지원 방지 추적 (URL 복구 시스템 남용 차단)
    match /application-attempts/{userId}/posts/{postId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 지원 시도 기록 생성 (첫 지원 시에만)
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll([
                         'userId', 'postId', 'firstAttemptAt', 'attemptCount', 'lastAttemptAt', 'status'
                       ]) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == userId &&
                       request.resource.data.postId == postId &&
                       request.resource.data.attemptCount == 1 &&
                       request.resource.data.status == 'attempted' &&
                       request.resource.data.firstAttemptAt is timestamp &&
                       request.resource.data.lastAttemptAt is timestamp;
      
      // 시도 횟수 업데이트 (재시도 시)
      allow update: if isOwner(userId) &&
                       request.resource.data.attemptCount > resource.data.attemptCount &&
                       request.resource.data.attemptCount <= resource.data.attemptCount + 1 &&
                       request.resource.data.lastAttemptAt is timestamp &&
                       // 5분 내 재시도 제한 (URL 복구 남용 방지)
                       request.time > resource.data.lastAttemptAt + duration.value(5, 'm');
      
      // 관리자만 삭제 가능 (정리 목적)
      allow delete: if isAdmin();
    }
    
    // 이용권 구매 페이지 접근 로그 (사용 패턴 분석용)
    match /pricing-page-access/{accessId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 시스템이 자동으로 접근 로그 생성
      allow create: if request.resource.data.keys().hasAll(['userId', 'userType', 'accessedAt', 'redirectedTo', 'userAgent']) &&
                       (!request.resource.data.keys().hasAny(['userId']) || 
                        request.resource.data.userId == request.auth.uid) &&
                       request.resource.data.userType in ['parent', 'therapist', 'anonymous'] &&
                       request.resource.data.redirectedTo in ['parent-pricing', 'teacher-pricing', 'pricing-selection'];
      
      // 수정/삭제 불가 (분석 데이터 보존)
      allow update, delete: if false;
    }
    
    // 프로필 수정 시도 로그 (보안 강화)
    match /profile-edit-attempts/{userId}/attempts/{attemptId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 시스템이 자동으로 수정 시도 기록
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'attemptedAt', 'changedFields', 'success', 'ipAddress', 'userAgent']) &&
                       request.resource.data.userId == userId &&
                       request.resource.data.success is bool &&
                       request.resource.data.changedFields is list;
      
      // 수정/삭제 불가 (보안 감사)
      allow update, delete: if false;
    }
    
    // 사용자 이용권 상태 (실시간 확인용)
    match /user-subscription-status/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 시스템/관리자만 상태 생성/업데이트 가능 (학부모용 필드 추가)
      allow create, update: if isAdmin() &&
                               request.resource.data.keys().hasAll(['userId', 'hasActiveSubscription', 'subscriptionType', 'expiryDate', 'lastUpdated']) &&
                               request.resource.data.userId == userId &&
                               request.resource.data.hasActiveSubscription is bool &&
                               request.resource.data.subscriptionType in ['parent', 'therapist', 'none'] &&
                               request.resource.data.lastUpdated is timestamp &&
                               // 학부모용 추가 필드 검증 (선택적)
                               (!request.resource.data.keys().hasAny(['remainingInterviews']) || 
                                (request.resource.data.remainingInterviews is number && 
                                 request.resource.data.remainingInterviews >= 0)) &&
                               (!request.resource.data.keys().hasAny(['totalInterviews']) || 
                                (request.resource.data.totalInterviews is number && 
                                 request.resource.data.totalInterviews >= 0)) &&
                               (!request.resource.data.keys().hasAny(['planName']) || 
                                request.resource.data.planName is string) &&
                               (!request.resource.data.keys().hasAny(['amount']) || 
                                (request.resource.data.amount is number && 
                                 request.resource.data.amount > 0)) &&
                               (!request.resource.data.keys().hasAny(['purchaseDate']) || 
                                request.resource.data.purchaseDate is timestamp) &&
                               // 추가 허용: 관리자 수기 부여 메모 필드
                               (!request.resource.data.keys().hasAny(['adminNote']) || 
                                request.resource.data.adminNote is string);

      // (선택) 본인에 의한 무료 인터뷰 1회 차감만 허용 (채팅 시작 시)
      allow update: if isOwner(userId) &&
                       resource.data.subscriptionType == 'parent' &&
                       resource.data.hasActiveSubscription == true &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['remainingInterviews','lastUpdated']) &&
                       request.resource.data.remainingInterviews is number &&
                       request.resource.data.remainingInterviews == resource.data.remainingInterviews - 1 &&
                       request.resource.data.lastUpdated is timestamp;
      
      // 삭제 불가 (상태 보존)
      allow delete: if false;
    }
    
    // 결제 승인/거절 로그 (관리자 작업 추적)
    match /payment-approvals/{approvalId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 관리자만 승인/거절 기록 생성
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'paymentId', 'adminId', 'action', 'reason', 'processedAt']) &&
                       request.resource.data.action in ['approved', 'rejected', 'pending'] &&
                       request.resource.data.adminId == request.auth.uid;
      
      // 수정/삭제 불가 (감사 추적 보존)
      allow update, delete: if false;
    }
    
    // 결제 확인 임시 데이터 (입금 확인용)
    match /payment-confirmations/{confirmationId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // 본인만 입금 확인 요청 생성
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'amount', 'depositName', 'planType', 'status', 'createdAt']) &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.amount is number &&
                       request.resource.data.amount > 0 &&
                       request.resource.data.planType in ['parent', 'therapist'] &&
                       request.resource.data.depositName is string;
      
      // 관리자만 상태 업데이트 가능 (승인/거절)
      allow update: if isAdmin() &&
                       request.resource.data.status in ['pending', 'confirmed', 'rejected'];
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 이용권 사용 내역 (학부모용 무료 인터뷰 기록)
    match /subscription-usage-history/{usageId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // 목록 조회 - 본인 것만 가능 (실시간 감지용)
      allow list: if isAuthenticated() && (isAdmin() || (request.query.limit <= 20 && hasRecentActivity()));
      
      // 본인 생성 허용: 채팅 시작/취소 기록 (간단 필드만)
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId','therapistName','action','status','createdAt']) &&
                       request.resource.data.action in ['chat_started','chat_cancelled'] &&
                       request.resource.data.status in ['completed','cancelled'] &&
                       request.resource.data.createdAt is timestamp &&
                       (!request.resource.data.keys().hasAny(['therapistId']) || request.resource.data.therapistId is string) &&
                       (!request.resource.data.keys().hasAny(['chatId']) || request.resource.data.chatId is string);
      
      // 상태 업데이트는 관리자만
      allow update: if isAdmin() &&
                       request.resource.data.status in ['completed', 'cancelled', 'pending'] &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId', 'therapistId', 'createdAt', 'action']);
      
      // 삭제 불가 (사용 기록 보존)
      allow delete: if false;
    }
    
    // 이용권 관리 페이지 접근 로그 (분석용)
    match /subscription-page-access/{accessId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 시스템이 자동으로 접근 로그 생성
      allow create: if request.resource.data.keys().hasAll(['userId', 'userType', 'accessedAt', 'subscriptionStatus']) &&
                       (!request.resource.data.keys().hasAny(['userId']) || 
                        request.resource.data.userId == request.auth.uid) &&
                       request.resource.data.userType in ['parent', 'therapist'] &&
                       request.resource.data.subscriptionStatus in ['active', 'inactive', 'expired'];
      
      // 수정/삭제 불가 (분석 데이터 보존)
      allow update, delete: if false;
    }
    
    // 인터뷰권 사용 내역 (토큰 관리 시스템)
    match /tokenUsage/{usageId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // 시스템/관리자만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'chatRoomId', 'therapistId', 'therapistName', 'action', 'amount', 'reason', 'createdAt']) &&
                       request.resource.data.action in ['used', 'refunded'] &&
                       request.resource.data.amount is number &&
                       request.resource.data.amount > 0;
      
      // 수정/삭제 불가 (회계 기록 보존)
      allow update, delete: if false;
    }
    
    // 브라우저 알림 로그 (알림 발송 추적)
    match /notificationLogs/{logId} {
      // 관리자만 읽기 가능 (분석용)
      allow read: if isAdmin();
      
      // 시스템만 생성 가능 (자동 로깅)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'type', 'title', 'body', 'sentAt', 'status']) &&
                       request.resource.data.type in ['chat_request', 'first_response', 'new_message'] &&
                       request.resource.data.status in ['sent', 'failed', 'clicked'];
      
      // 수정/삭제 불가 (로그 보존)
      allow update, delete: if false;
    }
    
    // 전화번호 차단 로그 (보안 감사)
    match /phoneFilterLogs/{logId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 시스템만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'chatRoomId', 'message', 'detectedPattern', 'blockedAt']) &&
                       request.resource.data.userId is string &&
                       request.resource.data.chatRoomId is string &&
                       request.resource.data.detectedPattern is string;
      
      // 수정/삭제 불가 (보안 감사 보존)
      allow update, delete: if false;
    }
    
    // 시스템 설정 (결제 정보, 앱 설정 등)
    match /system_settings/{settingId} {
      // 모든 사용자가 읽기 가능 (결제 정보 조회용)
      allow read: if true;
      
      // 관리자만 생성/수정 가능
      allow create, update: if isAdmin() &&
                               settingId in ['payment_config', 'teacher_payment_config', 'app_config', 'notification_config'];
      
      // 관리자만 삭제 가능 (신중한 삭제)
      allow delete: if isAdmin();
    }
  }
}