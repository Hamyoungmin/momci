rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // 헬퍼 함수들
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isFAQAdmin() {
      return request.auth != null && 
             request.auth.token.email == 'dudals7334@naver.com';
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwnerOrAdmin(userId) {
      return isOwner(userId) || isAdmin();
    }
    
    // 추가 보안 헬퍼 함수들
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPhone(phone) {
      return phone.matches('^01[0-9]-[0-9]{3,4}-[0-9]{4}$');
    }
    
    function hasRecentActivity() {
      return request.auth != null && request.auth.token.auth_time > timestamp.date() - duration.value(30, 'd');
    }
    
    function isBusinessHours() {
      return request.time.dayOfWeek() >= 1 && request.time.dayOfWeek() <= 5 &&
             request.time.hours() >= 9 && request.time.hours() < 18;
    }
    
    function rateLimitCheck(maxPerMinute) {
      // 실제로는 더 복잡한 rate limiting 로직이 필요하지만, 기본적인 시간 체크
      // 임시로 항상 true 반환 (실제 rate limiting은 클라이언트나 서버에서 처리)
      return true;
    }
    
    // 관리자 컬렉션 (관리자만 관리 가능)
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    
    // 사용자 프로필 (세분화된 권한)
    match /users/{userId} {
      // 개별 프로필 조회 - 본인, 관리자, 매칭된 상대방만 가능
      allow get: if isOwnerOrAdmin(userId) || 
                    (isAuthenticated() && 
                     exists(/databases/$(database)/documents/matchings/$(request.auth.uid + '_' + userId)));
      
      // 사용자 목록 조회 - 관리자만 가능
      allow list: if isAdmin();
      
      // 프로필 생성 - 본인만, 이메일/전화번호 검증 포함
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'name', 'userType', 'createdAt']) &&
                       request.resource.data.email is string &&
                       isValidEmail(request.resource.data.email) &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() >= 2 &&
                       request.resource.data.userType in ['parent', 'therapist'] &&
                       (!request.resource.data.keys().hasAny(['phone']) || 
                        isValidPhone(request.resource.data.phone)) &&
                       hasRecentActivity();
      
      // 프로필 수정 - 본인과 관리자만, 민감한 정보는 제한
      allow update: if isOwnerOrAdmin(userId) && 
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'userType', 'createdAt']) ||
                        isAdmin()) &&
                       (!request.resource.data.keys().hasAny(['phone']) || 
                        isValidPhone(request.resource.data.phone));
      
      // 프로필 삭제 - 관리자만
      allow delete: if isAdmin();
    }
    
    // 선생님께 요청하기 게시글 (세분화된 권한)
    match /requests/{requestId} {
      // 개별 게시글 조회 - 모든 인증된 사용자
      allow get: if isAuthenticated();
      
      // 게시글 목록 조회 - 인증된 사용자, 비활성 계정 제한
      allow list: if isAuthenticated() && hasRecentActivity();
      
      // 게시글 생성 - 스팸 방지 및 내용 검증
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'createdAt', 'status']) &&
                       request.resource.data.title is string &&
                       request.resource.data.content is string &&
                       request.resource.data.title.size() >= 5 &&
                       request.resource.data.title.size() <= 100 &&
                       request.resource.data.content.size() >= 10 &&
                       request.resource.data.content.size() <= 5000 &&
                       request.resource.data.status == 'active' &&
                       hasRecentActivity() &&
                       rateLimitCheck(5);  // 분당 5개 제한
      
      // 게시글 수정 - 작성자만, 일부 필드만 수정 가능
      allow update: if isOwner(resource.data.authorId) && 
                       request.resource.data.authorId == resource.data.authorId &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['authorId', 'createdAt']) &&
                       (request.resource.data.title.size() >= 5 && 
                        request.resource.data.title.size() <= 100) &&
                       (request.resource.data.content.size() >= 10 && 
                        request.resource.data.content.size() <= 5000);
      
      // 게시글 삭제 - 작성자와 관리자만
      allow delete: if isOwnerOrAdmin(resource.data.authorId);
      
      // 댓글/응답 서브컬렉션 (세분화된 권한)
      match /responses/{responseId} {
        // 개별 댓글 조회
        allow get: if isAuthenticated();
        
        // 댓글 목록 조회
        allow list: if isAuthenticated();
        
        // 댓글 생성 - 치료사만, 스팸 방지
        allow create: if isAuthenticated() && 
                         request.resource.data.authorId == request.auth.uid &&
                         request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'requestId']) &&
                         request.resource.data.requestId == requestId &&
                         request.resource.data.content is string &&
                         request.resource.data.content.size() >= 5 &&
                         request.resource.data.content.size() <= 1000 &&
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                         rateLimitCheck(10);  // 분당 10개 제한
        
        // 댓글 수정 - 작성자만
        allow update: if isOwner(resource.data.authorId) &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['authorId', 'createdAt', 'requestId']) &&
                         request.resource.data.content.size() >= 5 &&
                         request.resource.data.content.size() <= 1000;
        
        // 댓글 삭제 - 작성자와 관리자만
        allow delete: if isOwnerOrAdmin(resource.data.authorId);
      }
    }
    
    // 치료사 프로필 (세분화된 권한)
    match /therapistProfiles/{profileId} {
      // 개별 프로필 조회 - 승인된 프로필은 공개, 미승인은 본인과 관리자만
      allow get: if (resource.data.status == 'approved') ||
                    (isAuthenticated() && isOwnerOrAdmin(resource.data.userId));
      
      // 프로필 목록 조회 - 승인된 프로필은 공개, 관리자는 모두 (선생님 둘러보기용)
      allow list: if (request.query.where('status', '==', 'approved')) ||
                     (isAuthenticated() && isAdmin());
      
      // 프로필 생성 - 치료사만, 완전한 정보 필수
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['userId', 'name', 'experience', 'specialties', 'education', 'createdAt', 'status']) &&
                       request.resource.data.name.size() >= 2 &&
                       request.resource.data.experience is number &&
                       request.resource.data.experience >= 0 &&
                       request.resource.data.specialties is list &&
                       request.resource.data.specialties.size() > 0 &&
                       request.resource.data.status == 'pending';
      
      // 프로필 수정 - 본인은 일부 필드만, 관리자는 상태 변경 가능
      allow update: if (isOwner(resource.data.userId) && 
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId', 'createdAt', 'status', 'verificationDate'])) ||
                       (isAdmin() && 
                        request.resource.data.status in ['pending', 'approved', 'rejected']);
      
      // 프로필 삭제 - 관리자만
      allow delete: if isAdmin();
    }
    
    // 매칭 정보
    match /matchings/{matchingId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 생성은 관련 당사자만
      allow create: if isAuthenticated() && 
                       (request.resource.data.parentId == request.auth.uid || 
                        request.resource.data.therapistId == request.auth.uid) &&
                       request.resource.data.keys().hasAll(['requestId', 'parentId', 'therapistId', 'createdAt']);
      
      // 수정은 관련 당사자나 관리자만
      allow update: if isAuthenticated() && 
                       (resource.data.parentId == request.auth.uid || 
                        resource.data.therapistId == request.auth.uid || 
                        isAdmin());
      
      // 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 채팅 메시지 (세분화된 권한 + 보안 강화)
    match /chats/{chatId} {
      // 개별 채팅방 정보 조회
      allow get: if isAuthenticated() && 
                    (resource.data.participants.hasAny([request.auth.uid]) || isAdmin());
      
      // 채팅방 목록 조회 - 본인이 참여한 것만
      allow list: if isAuthenticated() && 
                     (isAdmin() || 
                      request.auth.uid in resource.data.participants);
      
      // 채팅방 생성 - 매칭된 사용자들만, 중복 방지
      allow create: if isAuthenticated() && 
                       request.resource.data.participants.hasAny([request.auth.uid]) &&
                       request.resource.data.participants.size() == 2 &&
                       request.resource.data.keys().hasAll(['participants', 'createdAt', 'lastMessage', 'status']) &&
                       request.resource.data.status == 'active' &&
                       hasRecentActivity();
      
      // 채팅방 정보 수정 - 참여자만 (상태 변경 등)
      allow update: if isAuthenticated() && 
                       (resource.data.participants.hasAny([request.auth.uid]) || isAdmin()) &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['participants', 'createdAt']);
      
      // 채팅방 삭제 - 관리자만 (중재 목적)
      allow delete: if isAdmin();
      
      // 메시지 서브컬렉션 (강화된 보안)
      match /messages/{messageId} {
        // 개별 메시지 조회
        allow get: if isAuthenticated() && 
                      (get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) || 
                       isAdmin());
        
        // 메시지 목록 조회 - 참여자만, 페이징 적용
        allow list: if isAuthenticated() && 
                       get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
                       hasRecentActivity();
        
        // 메시지 생성 - 참여자만, 스팸 방지 및 내용 검증
        allow create: if isAuthenticated() && 
                         request.resource.data.senderId == request.auth.uid &&
                         get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
                         request.resource.data.keys().hasAll(['senderId', 'message', 'timestamp', 'type']) &&
                         request.resource.data.message is string &&
                         request.resource.data.message.size() > 0 &&
                         request.resource.data.message.size() <= 1000 &&
                         request.resource.data.type in ['text', 'file', 'system'] &&
                         // 욕설/금지어 필터링 (실제로는 클라이언트에서 사전 필터링 필요)
                         !request.resource.data.message.lower().matches('.*직거래.*|.*외부.*|.*카톡.*|.*전화.*') &&
                         rateLimitCheck(30);  // 분당 30개 메시지 제한
        
        // 메시지 수정 - 본인만, 5분 이내, 읽음 상태 변경만
        allow update: if isOwner(resource.data.senderId) &&
                         request.time < resource.data.timestamp + duration.value(5, 'm') &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['message', 'editedAt']) &&
                         request.resource.data.message.size() > 0 &&
                         request.resource.data.message.size() <= 1000;
        
        // 메시지 삭제 - 관리자만 (중재 목적)
        allow delete: if isAdmin();
      }
    }
    
    // 신고 접수 (직거래 신고 등) - 실용적인 운영용 보안 규칙
    match /reports/{reportId} {
      // 신고 읽기: 특정 관리자 이메일 또는 관리자 컬렉션에 등록된 사용자
      allow read: if isAuthenticated() && 
                     (request.auth.token.email == 'dudals7334@naver.com' ||
                      exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
      
      // 신고 생성: 누구나 가능 (익명 신고 지원), 실제 데이터 구조에 맞춘 검증
      allow create: if request.resource.data.keys().hasAll([
                         'type', 'reporterId', 'reporterName', 'reporterType',
                         'reportedName', 'title', 'description', 'evidence',
                         'status', 'priority', 'createdAt', 'updatedAt', 'isAnonymous'
                       ]) &&
                       // 기본 타입 검증
                       request.resource.data.type is string &&
                       request.resource.data.reporterId is string &&
                       request.resource.data.reporterName is string &&
                       request.resource.data.reporterType == 'parent' &&
                       request.resource.data.reportedName is string &&
                       request.resource.data.title is string &&
                       request.resource.data.description is string &&
                       request.resource.data.evidence is list &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.priority in ['urgent', 'medium', 'low'] &&
                       request.resource.data.isAnonymous is bool &&
                       // 최소 길이 검증 (너무 엄격하지 않게)
                       request.resource.data.reportedName.size() >= 1 &&
                       request.resource.data.title.size() >= 1 &&
                       request.resource.data.description.size() >= 1;
      
      // 신고 수정: 관리자와 시스템 업데이트 허용 (파일 증빙 추가용)
      allow update: if (isAuthenticated() && 
                       (request.auth.token.email == 'dudals7334@naver.com' ||
                        exists(/databases/$(database)/documents/admins/$(request.auth.uid)))) || 
                       // 증빙 파일 추가 업데이트만 허용 (파일 업로드 후)
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['evidence', 'updatedAt']);
      
      // 신고 삭제: 관리자만 가능 (기록 보관 목적)
      allow delete: if isAuthenticated() && 
                       (request.auth.token.email == 'dudals7334@naver.com' ||
                        exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // 결제 정보
    match /payments/{paymentId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 결제 생성은 본인과 관리자만
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == request.auth.uid || isAdmin()) &&
                       request.resource.data.keys().hasAll(['userId', 'amount', 'type', 'createdAt']) &&
                       request.resource.data.amount is number &&
                       request.resource.data.amount > 0 &&
                       request.resource.data.type in ['subscription', 'lesson', 'refund'];
      
      // 결제 수정은 관리자만
      allow update: if isAdmin();
      
      // 결제 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 리뷰 정보
    match /reviews/{reviewId} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 리뷰 생성은 본인만
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['authorId', 'therapistId', 'rating', 'content', 'createdAt']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() > 0;
      
      // 리뷰 수정은 본인과 관리자만
      allow update: if isOwnerOrAdmin(resource.data.authorId);
      
      // 리뷰 삭제는 본인과 관리자만
      allow delete: if isOwnerOrAdmin(resource.data.authorId);
    }
    
    // 고객 지원 문의
    match /inquiries/{inquiryId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 문의 생성은 인증된 사용자만
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'title', 'content', 'category', 'createdAt']) &&
                       request.resource.data.title is string &&
                       request.resource.data.content is string &&
                       request.resource.data.title.size() > 0 &&
                       request.resource.data.content.size() > 0;
      
      // 문의 수정은 본인과 관리자만
      allow update: if isOwnerOrAdmin(resource.data.userId);
      
      // 문의 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 공지사항
    match /notices/{noticeId} {
      // 모든 사용자가 읽기 가능
      allow read: if true;
      
      // 특정 관리자만 공지사항 관리 가능 (FAQ 관리자와 동일)
      allow create, update, delete: if isFAQAdmin();
    }
    
    // FAQ
    match /faqs/{faqId} {
      // 모든 사용자가 읽기 가능
      allow read: if true;
      
      // 특정 관리자만 FAQ 관리 가능
      allow create, update, delete: if isFAQAdmin();
    }
    
    // 시스템 통계 (관리자만 접근 가능)
    match /statistics/{docId} {
      allow read, write: if isAdmin();
    }
    
    // 시스템 로그 (관리자만 접근 가능)
    match /logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // 구독/이용권 정보
    match /subscriptions/{subscriptionId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 구독 생성은 본인과 관리자만
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == request.auth.uid || isAdmin()) &&
                       request.resource.data.keys().hasAll(['userId', 'planType', 'status', 'startDate', 'endDate', 'createdAt']) &&
                       request.resource.data.planType in ['basic', 'premium', 'enterprise'] &&
                       request.resource.data.status in ['active', 'expired', 'cancelled'];
      
      // 구독 수정은 관리자만
      allow update: if isAdmin();
      
      // 구독 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 환불 요청
    match /refunds/{refundId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 환불 요청 생성은 본인만
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'paymentId', 'reason', 'amount', 'status', 'createdAt']) &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.amount is number &&
                       request.resource.data.amount > 0 &&
                       request.resource.data.reason is string &&
                       request.resource.data.reason.size() > 0;
      
      // 환불 상태 변경은 관리자만
      allow update: if isAdmin();
      
      // 환불 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 알림
    match /notifications/{notificationId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 알림 생성은 시스템/관리자만
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'title', 'message', 'type', 'isRead', 'createdAt']) &&
                       request.resource.data.type in ['system', 'matching', 'payment', 'chat', 'report'] &&
                       request.resource.data.isRead == false;
      
      // 알림 읽음 처리는 본인만
      allow update: if isOwner(resource.data.userId) && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) &&
                       request.resource.data.isRead == true;
      
      // 관리자는 모든 알림 수정 가능
      allow update: if isAdmin();
      
      // 알림 삭제는 본인과 관리자만
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }
    
    // 프로필 검증 서류 메타데이터
    match /verification_documents/{documentId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 서류 메타데이터 생성은 해당 사용자와 관리자만
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == request.auth.uid || isAdmin()) &&
                       request.resource.data.keys().hasAll(['userId', 'fileName', 'fileType', 'fileSize', 'uploadDate', 'status']) &&
                       request.resource.data.status in ['pending', 'approved', 'rejected'] &&
                       request.resource.data.fileType in ['education', 'experience', 'certificate', 'license', 'bankbook'];
      
      // 검증 상태 변경은 관리자만
      allow update: if isAdmin();
      
      // 서류 삭제는 관리자만
      allow delete: if isAdmin();
    }
    
    // 채팅 파일 메타데이터
    match /chat_files/{fileId} {
      // 채팅 참여자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.uploaderId == request.auth.uid || 
                      isAdmin());
      
      // 파일 메타데이터 생성은 업로더만
      allow create: if isAuthenticated() && 
                       request.resource.data.uploaderId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['chatId', 'uploaderId', 'fileName', 'fileType', 'fileSize', 'uploadDate']);
      
      // 파일 삭제는 관리자만 (중재 목적)
      allow delete: if isAdmin();
    }
    
    // 설정 정보 (관리자만 접근 가능)
    match /settings/{settingId} {
      allow read, write: if isAdmin();
    }
    
    // 수업 정보 (강화된 권한)
    match /lessons/{lessonId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 수업 생성은 관리자 또는 매칭 완료된 당사자만
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'matchingId', 'scheduledDate', 'status', 'createdAt']) &&
                       (request.resource.data.parentId == request.auth.uid || 
                        request.resource.data.therapistId == request.auth.uid || 
                        isAdmin()) &&
                       exists(/databases/$(database)/documents/matchings/$(request.resource.data.matchingId)) &&
                       request.resource.data.status == 'scheduled' &&
                       hasRecentActivity();
      
      // 수업 상태 변경은 관련 당사자와 관리자만
      allow update: if isAuthenticated() && 
                       (resource.data.parentId == request.auth.uid || 
                        resource.data.therapistId == request.auth.uid || 
                        isAdmin()) &&
                       // 상태만 변경 가능, 기본 정보는 수정 불가
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedAt', 'notes', 'updatedAt']);
      
      // 수업 삭제는 관리자만 (기록 보관 목적)
      allow delete: if isAdmin();
    }
    
    // 수업 계획서 (교육 계획)
    match /lesson-plans/{lessonPlanId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.therapistId == request.auth.uid || 
                      resource.data.parentId == request.auth.uid || 
                      isAdmin());
      
      // 치료사만 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.therapistId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['therapistId', 'parentId', 'title', 'objectives', 'activities', 'createdAt']) &&
                       hasRecentActivity();
      
      // 치료사와 관리자만 수정 가능
      allow update: if isAuthenticated() && 
                       (resource.data.therapistId == request.auth.uid || isAdmin());
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 일정 관리 (스케줄링)
    match /schedules/{scheduleId} {
      // 본인과 관련 당사자, 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      resource.data.relatedUsers.hasAny([request.auth.uid]) || 
                      isAdmin());
      
      // 본인만 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'title', 'startTime', 'endTime', 'type', 'createdAt']) &&
                       request.resource.data.type in ['lesson', 'consultation', 'break', 'personal'] &&
                       hasRecentActivity();
      
      // 본인과 관리자만 수정 가능
      allow update: if isOwnerOrAdmin(resource.data.userId);
      
      // 본인과 관리자만 삭제 가능
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }
    
    // 즐겨찾기/북마크 (치료사 즐겨찾기)
    match /favorites/{userId} {
      // 본인만 읽기 가능
      allow read: if isOwner(userId);
      
      // 본인만 생성/수정/삭제 가능
      allow create, update, delete: if isOwner(userId) && 
                                       hasRecentActivity();
    }
    
    // 사용자 선호도 설정
    match /user-preferences/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               request.resource.data.keys().hasAll(['userId', 'notifications', 'privacy', 'updatedAt']) &&
                               hasRecentActivity();
      
      // 관리자만 삭제 가능 (사용자 탈퇴 시)
      allow delete: if isAdmin();
    }
    
    // 위치 정보 (민감한 정보)
    match /locations/{userId} {
      // 본인, 매칭된 상대방, 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId) || 
                     (isAuthenticated() && 
                      exists(/databases/$(database)/documents/matchings/$(request.auth.uid + '_' + userId)));
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               request.resource.data.keys().hasAll(['userId', 'address', 'coordinates', 'accessibility', 'updatedAt']) &&
                               hasRecentActivity();
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 비상 연락처 (매우 민감)
    match /emergency-contacts/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               request.resource.data.keys().hasAll(['userId', 'name', 'phone', 'relationship', 'updatedAt']) &&
                               isValidPhone(request.resource.data.phone) &&
                               hasRecentActivity();
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 수업 히스토리 (기록 보관)
    match /lesson-history/{historyId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'lessonId', 'date', 'status', 'createdAt']);
      
      // 관리자만 수정 가능 (정정 목적)
      allow update: if isAdmin();
      
      // 삭제 불가 (영구 기록)
      allow delete: if false;
    }
    
    // 평점 히스토리 (투명성)
    match /rating-history/{ratingId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.raterId == request.auth.uid || 
                      resource.data.ratedId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (리뷰 작성 시 자동 생성)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['raterId', 'ratedId', 'reviewId', 'rating', 'createdAt']);
      
      // 수정/삭제 불가 (변조 방지)
      allow update, delete: if false;
    }
    
    // 할인 쿠폰/프로모션 코드
    match /promotional-codes/{codeId} {
      // 관리자만 읽기/관리 가능
      allow read, write: if isAdmin();
    }
    
    // 쿠폰 사용 기록
    match /coupon-usage/{usageId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 시스템/관리자만 생성 가능
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['userId', 'couponId', 'usedAt', 'discountAmount']);
      
      // 수정/삭제 불가 (회계 기록)
      allow update, delete: if false;
    }
    
    // 사용자 활동 로그 (보안 감사)
    match /user-activity/{userId}/logs/{logId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 시스템만 생성 가능 (자동 로깅)
      allow create: if isAdmin();
      
      // 수정/삭제 불가 (감사 추적)
      allow update, delete: if false;
    }
    
    // 차단된 사용자 목록
    match /blocked-users/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성/수정 가능
      allow create, update: if isOwner(userId) && 
                               hasRecentActivity() &&
                               rateLimitCheck(10); // 분당 10회 제한
      
      // 본인과 관리자만 삭제 가능
      allow delete: if isOwnerOrAdmin(userId);
    }
    
    // 저장된 검색 조건
    match /saved-searches/{userId} {
      // 본인만 접근 가능
      allow read, write: if isOwner(userId) && 
                            hasRecentActivity();
    }
    
    // 앱 버전 및 설정 관리
    match /app-versions/{versionId} {
      // 모든 사용자 읽기 가능 (업데이트 체크)
      allow read: if true;
      
      // 관리자만 생성/수정/삭제 가능
      allow create, update, delete: if isAdmin();
    }
    
    // 시스템 상태 및 점검 정보
    match /system-status/{statusId} {
      // 모든 사용자 읽기 가능
      allow read: if true;
      
      // 관리자만 수정 가능
      allow write: if isAdmin();
    }
    
    // 사용자 탈퇴 기록 (법적 요구사항)
    match /user-deletions/{deletionId} {
      // 관리자만 접근 가능
      allow read, write: if isAdmin();
    }
    
    // 데이터 백업 메타데이터
    match /backup-metadata/{backupId} {
      // 관리자만 접근 가능
      allow read, write: if isAdmin();
    }
    
    // 서비스 약관 동의 기록
    match /terms-agreements/{userId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(userId);
      
      // 본인만 생성 가능 (최초 가입 시, 약관 변경 시)
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['userId', 'termsVersion', 'agreedAt', 'ipAddress']);
      
      // 수정/삭제 불가 (법적 기록)
      allow update, delete: if false;
    }
    
    // 게시글 (선생님 요청하기 - posts 컬렉션)
    match /posts/{postId} {
      // 모든 인증된 사용자가 읽기 가능 (공개 게시판)
      allow read: if isAuthenticated();
      
      // 게시글 생성 - 학부모만 가능, 완전한 정보 필수
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'parent' &&
                       request.resource.data.keys().hasAll([
                         'treatment', 'region', 'age', 'gender', 'frequency', 
                         'timeDetails', 'price', 'authorId', 'createdAt', 'status', 'applications'
                       ]) &&
                       // 치료사 정보 필드들은 선택사항 (나중에 매칭 시 추가됨)
                       request.resource.data.treatment is string &&
                       request.resource.data.treatment.size() >= 2 &&
                       request.resource.data.region is string &&
                       request.resource.data.age is string &&
                       request.resource.data.gender in ['남', '여'] &&
                       request.resource.data.frequency is string &&
                       request.resource.data.status == 'active' &&
                       request.resource.data.applications == 0 &&
                       hasRecentActivity() &&
                       rateLimitCheck(5); // 분당 5개 제한
      
      // 게시글 수정 - 작성자는 기본 정보만, 치료사/관리자는 치료사 정보 추가 가능
      allow update: if isAuthenticated() && (
                       // 작성자는 기본 정보만 수정 가능
                       (isOwner(resource.data.authorId) && 
                        request.resource.data.authorId == resource.data.authorId &&
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny([
                          'authorId', 'createdAt', 'applications', 'teacherName', 'teacherExperience',
                          'teacherSpecialty', 'teacherRating', 'teacherReviewCount', 'teacherProfileImage',
                          'teacherCertifications', 'teacherEducation', 'teacherCareer', 'teacherRegions',
                          'teacherSchedule', 'teacherIntroduction', 'teacherPhilosophy', 'teacherServices', 'teacherVideoUrl'
                        ])) ||
                       // 치료사는 지원 시 자신의 정보를 추가할 수 있음
                       (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny([
                          'authorId', 'createdAt', 'treatment', 'region', 'age', 'gender', 
                          'frequency', 'timeDetails', 'price'
                        ]) &&
                        // 지원자 수 증가 허용
                        request.resource.data.applications >= resource.data.applications) ||
                       // 관리자는 모든 필드 수정 가능
                       isAdmin()
                     );
      
      // 게시글 삭제 - 작성자와 관리자만
      allow delete: if isOwnerOrAdmin(resource.data.authorId);
    }
    
    // 게시글 지원/신청 관리
    match /applications/{applicationId} {
      // 지원자와 게시글 작성자, 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.applicantId == request.auth.uid || 
                      resource.data.postAuthorId == request.auth.uid || 
                      isAdmin());
      
      // 치료사만 지원 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.applicantId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       request.resource.data.keys().hasAll(['postId', 'applicantId', 'postAuthorId', 'message', 'status', 'createdAt']) &&
                       request.resource.data.message is string &&
                       request.resource.data.message.size() >= 10 &&
                       request.resource.data.message.size() <= 1000 &&
                       request.resource.data.status == 'pending' &&
                       hasRecentActivity() &&
                       rateLimitCheck(20); // 분당 20개 제한
      
      // 상태 변경은 게시글 작성자와 지원자만 (승인/거절/철회)
      allow update: if isAuthenticated() && 
                       (resource.data.applicantId == request.auth.uid || 
                        resource.data.postAuthorId == request.auth.uid || 
                        isAdmin()) &&
                       request.resource.data.status in ['pending', 'approved', 'rejected', 'withdrawn'];
      
      // 삭제는 관리자만 (기록 보관)
      allow delete: if isAdmin();
    }
    
    // 게시글 조회수 관리 (익명 통계)
    match /post-views/{viewId} {
      // 관리자와 게시글 작성자만 읽기 가능
      allow read: if isAdmin() || 
                     (isAuthenticated() && 
                      resource.data.postAuthorId == request.auth.uid);
      
      // 조회수 증가는 모든 인증된 사용자 (중복 방지 로직은 클라이언트에서)
      allow create: if isAuthenticated() && 
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       request.resource.data.keys().hasAll(['postId', 'postAuthorId', 'viewerId', 'timestamp']) &&
                       // 본인 게시글 조회수는 증가하지 않음
                       request.resource.data.viewerId != request.resource.data.postAuthorId;
      
      // 수정/삭제 불가 (통계 무결성)
      allow update, delete: if false;
    }
    
    // 게시글 즐겨찾기/관심표시 (치료사가 관심 게시글 저장)
    match /post-favorites/{favoriteId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 치료사만 즐겨찾기 추가 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       request.resource.data.keys().hasAll(['userId', 'postId', 'createdAt']) &&
                       hasRecentActivity();
      
      // 본인만 삭제 가능 (즐겨찾기 해제)
      allow delete: if isOwner(resource.data.userId);
    }
    
    // 게시글 검색 기록 (개인화 추천용)
    match /search-history/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if isOwner(userId) && 
                            hasRecentActivity();
    }
    
    // 게시글 신고 (부적절한 내용)
    match /post-reports/{reportId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 인증된 사용자는 신고 생성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.reporterId == request.auth.uid &&
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                       request.resource.data.keys().hasAll(['postId', 'reporterId', 'reason', 'description', 'createdAt']) &&
                       request.resource.data.reason in ['spam', 'inappropriate', 'fraud', 'false_info', 'other'] &&
                       request.resource.data.description is string &&
                       request.resource.data.description.size() >= 5 &&
                       hasRecentActivity() &&
                       rateLimitCheck(5); // 분당 5개 제한
      
      // 관리자만 수정/삭제 가능
      allow update, delete: if isAdmin();
    }
    
    // 매칭 성사 기록 (통계 및 성공률 추적)
    match /successful-matches/{matchId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.parentId == request.auth.uid || 
                      resource.data.therapistId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (매칭 성사 시 자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['postId', 'parentId', 'therapistId', 'applicationId', 'matchedAt', 'status']);
      
      // 관리자만 수정 가능 (상태 업데이트)
      allow update: if isAdmin();
      
      // 삭제 불가 (성공률 통계 보존)
      allow delete: if false;
    }
    
    // 게시글 댓글/응답 시스템 (posts용)
    match /posts/{postId}/comments/{commentId} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 치료사만 댓글 작성 가능 (지원 의사 표현)
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       exists(/databases/$(database)/documents/posts/$(postId)) &&
                       request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'postId']) &&
                       request.resource.data.postId == postId &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() >= 5 &&
                       request.resource.data.content.size() <= 500 &&
                       hasRecentActivity() &&
                       rateLimitCheck(10); // 분당 10개 제한
      
      // 작성자와 게시글 작성자만 수정 가능
      allow update: if isAuthenticated() && 
                       (resource.data.authorId == request.auth.uid || 
                        get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid ||
                        isAdmin()) &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['authorId', 'createdAt', 'postId']);
      
      // 작성자, 게시글 작성자, 관리자만 삭제 가능
      allow delete: if isAuthenticated() && 
                       (resource.data.authorId == request.auth.uid || 
                        get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid ||
                        isAdmin());
    }
    
    // 게시글 임시저장 (작성 중 임시 보관)
    match /drafts/{userId} {
      // 본인만 접근 가능
      allow read, write: if isOwner(userId) && 
                            hasRecentActivity();
    }
    
    // 게시글 수정 이력 (감사 추적)
    match /post-edit-history/{historyId} {
      // 게시글 작성자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.postAuthorId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성 가능 (자동 기록)
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['postId', 'postAuthorId', 'editedBy', 'changes', 'editedAt']);
      
      // 수정/삭제 불가 (감사 추적 보존)
      allow update, delete: if false;
    }
    
    // 지역별 인기 통계 (실시간 트렌드)
    match /region-stats/{region} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 시스템/관리자만 업데이트 가능
      allow write: if isAdmin();
    }
    
    // 치료별 인기 통계 (실시간 트렌드)
    match /treatment-stats/{treatment} {
      // 모든 인증된 사용자가 읽기 가능
      allow read: if isAuthenticated();
      
      // 시스템/관리자만 업데이트 가능
      allow write: if isAdmin();
    }
    
    // 알림 구독 설정 (새 게시글 알림)
    match /notification-subscriptions/{subscriptionId} {
      // 본인과 관리자만 읽기 가능
      allow read: if isOwnerOrAdmin(resource.data.userId);
      
      // 치료사만 구독 설정 가능 (관심 지역/치료 알림)
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'therapist' &&
                       request.resource.data.keys().hasAll(['userId', 'regions', 'treatments', 'isActive', 'createdAt']) &&
                       request.resource.data.regions is list &&
                       request.resource.data.treatments is list &&
                       request.resource.data.isActive == true &&
                       hasRecentActivity();
      
      // 본인만 수정/삭제 가능
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // 인기 검색어 추적 (트렌드 분석)
    match /popular-searches/{searchId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();
      
      // 시스템/관리자만 생성/수정 가능
      allow create, update: if isAdmin() &&
                               request.resource.data.keys().hasAll(['searchTerm', 'count', 'lastSearched']);
      
      // 삭제 불가 (트렌드 데이터 보존)
      allow delete: if false;
    }
    
    // 게시글 만료 관리 (자동 만료 시스템)
    match /post-expiry/{postId} {
      // 게시글 작성자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (resource.data.authorId == request.auth.uid || 
                      isAdmin());
      
      // 시스템/관리자만 생성/수정 가능 (자동 만료 설정)
      allow create, update: if isAdmin() &&
                               request.resource.data.keys().hasAll(['postId', 'authorId', 'expiryDate', 'isExpired']) &&
                               exists(/databases/$(database)/documents/posts/$(postId));
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 치료사 프로필 즐겨찾기 (선생님 둘러보기)
    match /therapist-favorites/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if isOwner(userId);
      
      // 즐겨찾기 추가
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'therapistId', 'createdAt']) &&
                       exists(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId));
    }
    
    // 치료사 프로필 조회 기록 (추천 알고리즘용)
    match /therapist-views/{viewId} {
      // 관리자만 읽기 가능 (분석용)
      allow read: if isAdmin();
      
      // 조회 기록 생성 (익명 또는 인증된 사용자)
      allow create: if request.resource.data.keys().hasAll(['therapistId', 'viewedAt', 'userAgent']) &&
                       exists(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)) &&
                       get(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)).data.status == 'approved';
      
      // 수정/삭제 불가
      allow update, delete: if false;
    }
    
    // 치료사 프로필 검색 기록 (개인화 추천용)
    match /therapist-searches/{searchId} {
      // 관리자만 읽기 가능 (분석용)
      allow read: if isAdmin();
      
      // 검색 기록 생성
      allow create: if request.resource.data.keys().hasAll(['query', 'filters', 'results', 'searchedAt']) &&
                       request.resource.data.query is string &&
                       request.resource.data.query.size() >= 1;
      
      // 수정/삭제 불가
      allow update, delete: if false;
    }
    
    // 치료사-학부모 채팅방 (선생님 둘러보기에서 시작)
    match /therapist-inquiries/{inquiryId} {
      // 관련 당사자와 관리자만 읽기 가능
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.parentId ||
                      request.auth.uid == resource.data.therapistId ||
                      isAdmin());
      
      // 학부모만 문의 시작 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.parentId == request.auth.uid &&
                       exists(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)) &&
                       get(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)).data.status == 'approved' &&
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'subject', 'initialMessage', 'createdAt', 'status']) &&
                       request.resource.data.status == 'active';
      
      // 상태 업데이트만 관련 당사자가 가능
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.parentId ||
                        request.auth.uid == resource.data.therapistId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
    
    // 치료사 프로필 평점/리뷰 (선생님 둘러보기)
    match /therapist-reviews/{reviewId} {
      // 모든 인증된 사용자가 읽기 가능 (공개 리뷰)
      allow read: if isAuthenticated();
      
      // 수업을 받은 학부모만 리뷰 작성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.parentId == request.auth.uid &&
                       exists(/databases/$(database)/documents/therapistProfiles/$(request.resource.data.therapistId)) &&
                       request.resource.data.keys().hasAll(['parentId', 'therapistId', 'rating', 'content', 'createdAt']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5;
      
      // 작성자만 수정 가능 (작성 후 24시간 내)
      allow update: if isOwner(resource.data.parentId) && 
                       request.time < resource.data.createdAt + duration.value(24, 'h') &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['parentId', 'therapistId', 'createdAt']);
      
      // 관리자만 삭제 가능 (부적절한 리뷰)
      allow delete: if isAdmin();
    }

    // 일반 후기 (reviews 컬렉션)
    match /reviews/{reviewId} {
      // 승인된 후기만 읽기 가능 (일반 사용자)
      allow read: if resource.data.status == 'approved' || 
                     isOwner(resource.data.userId) || 
                     isAdmin();
      
      // 인증된 사용자만 후기 작성 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['title', 'content', 'category', 'rating', 'createdAt', 'status']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       request.resource.data.status == 'pending';
      
      // 관리자만 상태 변경 가능 (승인/거부)
      allow update: if isAdmin() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
                       request.resource.data.status in ['pending', 'approved', 'rejected'];
      
      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }
  }
}